<root>
<signal name="AdwAboutWindow::activate-link">
<description>
Emitted when a URL is activated.

Applications may connect to it to override the default behavior, which is
to call [func@Gtk.show_uri].

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an about window
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> the URI to activate
</parameter_description>
</parameter>
</parameters>
<return> `TRUE` if the link has been activated

</return>
</signal>

<signal name="AdwActionRow::activated">
<description>
This signal is emitted after the row has been activated.

Since: 1.0

</description>
<parameters>
</parameters>
<return></return>
</signal>

<signal name="AdwAnimation::done">
<description>
This signal is emitted when the animation has been completed, either on its
own or via calling [method@Animation.skip].

Since: 1.0

</description>
<parameters>
</parameters>
<return></return>
</signal>

<enum name="AdwAnimationState">
<description>
Describes the possible states of an [class@Animation].

The state can be controlled with [method@Animation.play],
[method@Animation.pause], [method@Animation.resume],
[method@Animation.reset] and [method@Animation.skip].

Since: 1.0

</description>
<parameters>
<parameter name="ADW_ANIMATION_IDLE">
<parameter_description> The animation hasn't started yet.
</parameter_description>
</parameter>
<parameter name="ADW_ANIMATION_PAUSED">
<parameter_description> The animation has been paused.
</parameter_description>
</parameter>
<parameter name="ADW_ANIMATION_PLAYING">
<parameter_description> The animation is currently playing.
</parameter_description>
</parameter>
<parameter name="ADW_ANIMATION_FINISHED">
<parameter_description> The animation has finished.
</parameter_description>
</parameter>
</parameters>
</enum>

<signal name="AdwCarousel::page-changed">
<description>
This signal is emitted after a page has been changed.

It can be used to implement &quot;infinite scrolling&quot; by amending the pages
after every scroll.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a carousel
</parameter_description>
</parameter>
<parameter name="index">
<parameter_description> current page
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<enum name="AdwCenteringPolicy">
<description>
Describes title centering behavior of a [class@HeaderBar] widget.

Since: 1.0

</description>
<parameters>
<parameter name="ADW_CENTERING_POLICY_LOOSE">
<parameter_description> Keep the title centered when possible
</parameter_description>
</parameter>
<parameter name="ADW_CENTERING_POLICY_STRICT">
<parameter_description> Keep the title centered at all cost
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="AdwColorScheme">
<description>
Application color schemes for [property@StyleManager:color-scheme].

Since: 1.0

</description>
<parameters>
<parameter name="ADW_COLOR_SCHEME_DEFAULT">
<parameter_description> Inherit the parent color-scheme. When set on the
`AdwStyleManager` returned by [func@StyleManager.get_default], it's
equivalent to `ADW_COLOR_SCHEME_PREFER_LIGHT`.
</parameter_description>
</parameter>
<parameter name="ADW_COLOR_SCHEME_FORCE_LIGHT">
<parameter_description> Always use light appearance.
</parameter_description>
</parameter>
<parameter name="ADW_COLOR_SCHEME_PREFER_LIGHT">
<parameter_description> Use light appearance unless the system
prefers dark colors.
</parameter_description>
</parameter>
<parameter name="ADW_COLOR_SCHEME_PREFER_DARK">
<parameter_description> Use dark appearance unless the system prefers
prefers light colors.
</parameter_description>
</parameter>
<parameter name="ADW_COLOR_SCHEME_FORCE_DARK">
<parameter_description> Always use dark appearance.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="AdwEasing">
<description>
Describes the available easing functions for use with
[class@TimedAnimation].

New values may be added to this enumeration over time.

Since: 1.0

</description>
<parameters>
<parameter name="ADW_LINEAR">
<parameter_description> Linear tweening.
</parameter_description>
</parameter>
<parameter name="ADW_EASE_IN_QUAD">
<parameter_description> Quadratic tweening.
</parameter_description>
</parameter>
<parameter name="ADW_EASE_OUT_QUAD">
<parameter_description> Quadratic tweening, inverse of `ADW_EASE_IN_QUAD`.
</parameter_description>
</parameter>
<parameter name="ADW_EASE_IN_OUT_QUAD">
<parameter_description> Quadratic tweening, combining `ADW_EASE_IN_QUAD` and
`ADW_EASE_OUT_QUAD`.
</parameter_description>
</parameter>
<parameter name="ADW_EASE_IN_CUBIC">
<parameter_description> Cubic tweening.
</parameter_description>
</parameter>
<parameter name="ADW_EASE_OUT_CUBIC">
<parameter_description> Cubic tweening, inverse of `ADW_EASE_IN_CUBIC`.
</parameter_description>
</parameter>
<parameter name="ADW_EASE_IN_OUT_CUBIC">
<parameter_description> Cubic tweening, combining `ADW_EASE_IN_CUBIC` and
`ADW_EASE_OUT_CUBIC`.
</parameter_description>
</parameter>
<parameter name="ADW_EASE_IN_QUART">
<parameter_description> Quartic tweening.
</parameter_description>
</parameter>
<parameter name="ADW_EASE_OUT_QUART">
<parameter_description> Quartic tweening, inverse of `ADW_EASE_IN_QUART`.
</parameter_description>
</parameter>
<parameter name="ADW_EASE_IN_OUT_QUART">
<parameter_description> Quartic tweening, combining `ADW_EASE_IN_QUART` and
`ADW_EASE_OUT_QUART`.
</parameter_description>
</parameter>
<parameter name="ADW_EASE_IN_QUINT">
<parameter_description> Quintic tweening.
</parameter_description>
</parameter>
<parameter name="ADW_EASE_OUT_QUINT">
<parameter_description> Quintic tweening, inverse of `ADW_EASE_IN_QUINT`.
</parameter_description>
</parameter>
<parameter name="ADW_EASE_IN_OUT_QUINT">
<parameter_description> Quintic tweening, combining `ADW_EASE_IN_QUINT` and
`ADW_EASE_OUT_QUINT`.
</parameter_description>
</parameter>
<parameter name="ADW_EASE_IN_SINE">
<parameter_description> Sine wave tweening.
</parameter_description>
</parameter>
<parameter name="ADW_EASE_OUT_SINE">
<parameter_description> Sine wave tweening, inverse of `ADW_EASE_IN_SINE`.
</parameter_description>
</parameter>
<parameter name="ADW_EASE_IN_OUT_SINE">
<parameter_description> Sine wave tweening, combining `ADW_EASE_IN_SINE` and
`ADW_EASE_OUT_SINE`.
</parameter_description>
</parameter>
<parameter name="ADW_EASE_IN_EXPO">
<parameter_description> Exponential tweening.
</parameter_description>
</parameter>
<parameter name="ADW_EASE_OUT_EXPO">
<parameter_description> Exponential tweening, inverse of `ADW_EASE_IN_EXPO`.
</parameter_description>
</parameter>
<parameter name="ADW_EASE_IN_OUT_EXPO">
<parameter_description> Exponential tweening, combining `ADW_EASE_IN_EXPO` and
`ADW_EASE_OUT_EXPO`.
</parameter_description>
</parameter>
<parameter name="ADW_EASE_IN_CIRC">
<parameter_description> Circular tweening.
</parameter_description>
</parameter>
<parameter name="ADW_EASE_OUT_CIRC">
<parameter_description> Circular tweening, inverse of `ADW_EASE_IN_CIRC`.
</parameter_description>
</parameter>
<parameter name="ADW_EASE_IN_OUT_CIRC">
<parameter_description> Circular tweening, combining `ADW_EASE_IN_CIRC` and
`ADW_EASE_OUT_CIRC`.
</parameter_description>
</parameter>
<parameter name="ADW_EASE_IN_ELASTIC">
<parameter_description> Elastic tweening, with offshoot on start.
</parameter_description>
</parameter>
<parameter name="ADW_EASE_OUT_ELASTIC">
<parameter_description> Elastic tweening, with offshoot on end, inverse of
`ADW_EASE_IN_ELASTIC`.
</parameter_description>
</parameter>
<parameter name="ADW_EASE_IN_OUT_ELASTIC">
<parameter_description> Elastic tweening, with offshoot on both ends,
combining `ADW_EASE_IN_ELASTIC` and `ADW_EASE_OUT_ELASTIC`.
</parameter_description>
</parameter>
<parameter name="ADW_EASE_IN_BACK">
<parameter_description> Overshooting cubic tweening, with backtracking on start.
</parameter_description>
</parameter>
<parameter name="ADW_EASE_OUT_BACK">
<parameter_description> Overshooting cubic tweening, with backtracking on end,
inverse of `ADW_EASE_IN_BACK`.
</parameter_description>
</parameter>
<parameter name="ADW_EASE_IN_OUT_BACK">
<parameter_description> Overshooting cubic tweening, with backtracking on both
ends, combining `ADW_EASE_IN_BACK` and `ADW_EASE_OUT_BACK`.
</parameter_description>
</parameter>
<parameter name="ADW_EASE_IN_BOUNCE">
<parameter_description> Exponentially decaying parabolic (bounce) tweening,
on start.
</parameter_description>
</parameter>
<parameter name="ADW_EASE_OUT_BOUNCE">
<parameter_description> Exponentially decaying parabolic (bounce) tweening,
with bounce on end, inverse of `ADW_EASE_IN_BOUNCE`.
</parameter_description>
</parameter>
<parameter name="ADW_EASE_IN_OUT_BOUNCE">
<parameter_description> Exponentially decaying parabolic (bounce) tweening,
with bounce on both ends, combining `ADW_EASE_IN_BOUNCE` and
`ADW_EASE_OUT_BOUNCE`.
</parameter_description>
</parameter>
</parameters>
</enum>

<signal name="AdwEntryRow::apply">
<description>
Emitted when the apply button is pressed.

See [property@EntryRow:show-apply-button].

Since: 1.2

</description>
<parameters>
</parameters>
<return></return>
</signal>

<signal name="AdwEntryRow::entry-activated">
<description>
Emitted when the embedded entry is activated.

Since: 1.2

</description>
<parameters>
</parameters>
<return></return>
</signal>

<enum name="AdwFlapFoldPolicy">
<description>
Describes the possible folding behavior of a [class@Flap] widget.

Since: 1.0

</description>
<parameters>
<parameter name="ADW_FLAP_FOLD_POLICY_NEVER">
<parameter_description> Disable folding, the flap cannot reach narrow
sizes.
</parameter_description>
</parameter>
<parameter name="ADW_FLAP_FOLD_POLICY_ALWAYS">
<parameter_description> Keep the flap always folded.
</parameter_description>
</parameter>
<parameter name="ADW_FLAP_FOLD_POLICY_AUTO">
<parameter_description> Fold and unfold the flap based on available
space.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="AdwFlapTransitionType">
<description>
Describes transitions types of a [class@Flap] widget.

It determines the type of animation when transitioning between children in a
[class@Flap] widget, as well as which areas can be swiped via
[property@Flap:swipe-to-open] and [property@Flap:swipe-to-close].

New values may be added to this enum over time.

Since: 1.0

</description>
<parameters>
<parameter name="ADW_FLAP_TRANSITION_TYPE_OVER">
<parameter_description> The flap slides over the content, which is
dimmed. When folded, only the flap can be swiped.
</parameter_description>
</parameter>
<parameter name="ADW_FLAP_TRANSITION_TYPE_UNDER">
<parameter_description> The content slides over the flap. Only the
content can be swiped.
</parameter_description>
</parameter>
<parameter name="ADW_FLAP_TRANSITION_TYPE_SLIDE">
<parameter_description> The flap slides offscreen when hidden,
neither the flap nor content overlap each other. Both widgets can be
swiped.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="AdwFoldThresholdPolicy">
<description>
Determines when [class@Flap] and [class@Leaflet] will fold.

Since: 1.0

</description>
<parameters>
<parameter name="ADW_FOLD_THRESHOLD_POLICY_MINIMUM">
<parameter_description> Folding is based on the minimum size
</parameter_description>
</parameter>
<parameter name="ADW_FOLD_THRESHOLD_POLICY_NATURAL">
<parameter_description> Folding is based on the natural size
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="AdwLeafletTransitionType">
<description>
Describes the possible transitions in a [class@Leaflet] widget.

New values may be added to this enumeration over time.

Since: 1.0

</description>
<parameters>
<parameter name="ADW_LEAFLET_TRANSITION_TYPE_OVER">
<parameter_description> Cover the old page or uncover the new page, sliding from or towards the end according to orientation, text direction and children order
</parameter_description>
</parameter>
<parameter name="ADW_LEAFLET_TRANSITION_TYPE_UNDER">
<parameter_description> Uncover the new page or cover the old page, sliding from or towards the start according to orientation, text direction and children order
</parameter_description>
</parameter>
<parameter name="ADW_LEAFLET_TRANSITION_TYPE_SLIDE">
<parameter_description> Slide from left, right, up or down according to the orientation, text direction and the children order
</parameter_description>
</parameter>
</parameters>
</enum>

<signal name="AdwMessageDialog::response">
<description>
This signal is emitted when the dialog is closed.

@response will be set to the response ID of the button that had been
activated.

if the dialog was closed by pressing &lt;kbd&gt;Escape&lt;/kbd&gt; or with a system
action, @response will be set to the value of
[property@MessageDialog:close-response].

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a message dialog
</parameter_description>
</parameter>
<parameter name="response">
<parameter_description> the response ID
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<enum name="AdwNavigationDirection">
<description>
Describes the direction of a swipe navigation gesture.

Since: 1.0

</description>
<parameters>
<parameter name="ADW_NAVIGATION_DIRECTION_BACK">
<parameter_description> Corresponds to start or top, depending on orientation and text direction
</parameter_description>
</parameter>
<parameter name="ADW_NAVIGATION_DIRECTION_FORWARD">
<parameter_description> Corresponds to end or bottom, depending on orientation and text direction
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="AdwResponseAppearance">
<description>
Describes the possible styles of [class@MessageDialog] response buttons.

See [method@MessageDialog.set_response_appearance].

Since: 1.2

</description>
<parameters>
<parameter name="ADW_RESPONSE_DEFAULT">
<parameter_description> the default appearance.
</parameter_description>
</parameter>
<parameter name="ADW_RESPONSE_SUGGESTED">
<parameter_description> used to denote important responses such as the
affirmative action.
</parameter_description>
</parameter>
<parameter name="ADW_RESPONSE_DESTRUCTIVE">
<parameter_description> used to draw attention to the potentially damaging
consequences of using the response. This appearance acts as a warning to
the user.
</parameter_description>
</parameter>
</parameters>
</enum>

<signal name="AdwSplitButton::activate">
<description>
Emitted to animate press then release.

This is an action signal. Applications should never connect to this signal,
but use the [signal@SplitButton::clicked] signal.

Since: 1.0

</description>
<parameters>
</parameters>
<return></return>
</signal>

<signal name="AdwSplitButton::clicked">
<description>
Emitted when the button has been activated (pressed and released).

Since: 1.0

</description>
<parameters>
</parameters>
<return></return>
</signal>

<enum name="AdwSqueezerTransitionType">
<description>
Describes the possible transitions in a [class@Squeezer] widget.

Since: 1.0

</description>
<parameters>
<parameter name="ADW_SQUEEZER_TRANSITION_TYPE_NONE">
<parameter_description> No transition
</parameter_description>
</parameter>
<parameter name="ADW_SQUEEZER_TRANSITION_TYPE_CROSSFADE">
<parameter_description> A cross-fade
</parameter_description>
</parameter>
</parameters>
</enum>

<signal name="AdwSwipeTracker::begin-swipe">
<description>
This signal is emitted right before a swipe will be started, after the
drag threshold has been passed.

Since: 1.0

</description>
<parameters>
</parameters>
<return></return>
</signal>

<signal name="AdwSwipeTracker::end-swipe">
<description>
This signal is emitted as soon as the gesture has stopped.

The user is expected to animate the deceleration from the current progress
value to @to with an animation using @velocity as the initial velocity,
provided in pixels per second. [class@SpringAnimation] is usually a good
fit for this.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a swipe tracker
</parameter_description>
</parameter>
<parameter name="velocity">
<parameter_description> the velocity of the swipe
</parameter_description>
</parameter>
<parameter name="to">
<parameter_description> the progress value to animate to
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="AdwSwipeTracker::prepare">
<description>
This signal is emitted when a possible swipe is detected.

The @direction value can be used to restrict the swipe to a certain
direction.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a swipe tracker
</parameter_description>
</parameter>
<parameter name="direction">
<parameter_description> the direction of the swipe
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="AdwSwipeTracker::update-swipe">
<description>
This signal is emitted every time the progress value changes.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a swipe tracker
</parameter_description>
</parameter>
<parameter name="progress">
<parameter_description> the current animation progress value
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="AdwTabBar::extra-drag-drop">
<description>
This signal is emitted when content is dropped onto a tab.

The content must be of one of the types set up via
[method@TabBar.setup_extra_drop_target].

See [signal@Gtk.DropTarget::drop].

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab bar
</parameter_description>
</parameter>
<parameter name="page">
<parameter_description> the page matching the tab the content was dropped onto
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the `GValue` being dropped
</parameter_description>
</parameter>
</parameters>
<return> whether the drop was accepted for @page

</return>
</signal>

<signal name="AdwTabView::close-page">
<description>
Emitted after [method@TabView.close_page] has been called for @page.

The handler is expected to call [method@TabView.close_page_finish] to
confirm or reject the closing.

The default handler will immediately confirm closing for non-pinned pages,
or reject it for pinned pages, equivalent to the following example:

```c
static gboolean
close_page_cb (AdwTabView *view,
AdwTabPage *page,
gpointer    user_data)
{
adw_tab_view_close_page_finish (view, page, !adw_tab_page_get_pinned (page));

return GDK_EVENT_STOP;
}
```

The [method@TabView.close_page_finish] call doesn't have to happen inside
the handler, so can be used to do asynchronous checks before confirming the
closing.

A typical reason to connect to this signal is to show a confirmation dialog
for closing a tab.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab view
</parameter_description>
</parameter>
<parameter name="page">
<parameter_description> a page of @self
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="AdwTabView::create-window">
<description>
Emitted when a tab should be transferred into a new window.

This can happen after a tab has been dropped on desktop.

The signal handler is expected to create a new window, position it as
needed and return its `AdwTabView` that the page will be transferred into.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab view
</parameter_description>
</parameter>
</parameters>
<return> the `AdwTabView` from the new window

</return>
</signal>

<signal name="AdwTabView::indicator-activated">
<description>
Emitted after the indicator icon on @page has been activated.

See [property@TabPage:indicator-icon] and
[property@TabPage:indicator-activatable].

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab view
</parameter_description>
</parameter>
<parameter name="page">
<parameter_description> a page of @self
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="AdwTabView::page-attached">
<description>
Emitted when a page has been created or transferred to @self.

A typical reason to connect to this signal would be to connect to page
signals for things such as updating window title.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab view
</parameter_description>
</parameter>
<parameter name="page">
<parameter_description> a page of @self
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the position of the page, starting from 0
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="AdwTabView::page-detached">
<description>
Emitted when a page has been removed or transferred to another view.

A typical reason to connect to this signal would be to disconnect signal
handlers connected in the [signal@TabView::page-attached] handler.

It is important not to try and destroy the page child in the handler of
this function as the child might merely be moved to another window; use
child dispose handler for that or do it in sync with your
[method@TabView.close_page_finish] calls.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab view
</parameter_description>
</parameter>
<parameter name="page">
<parameter_description> a page of @self
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the position of the removed page, starting from 0
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="AdwTabView::page-reordered">
<description>
Emitted after @page has been reordered to @position.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab view
</parameter_description>
</parameter>
<parameter name="page">
<parameter_description> a page of @self
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the position @page was moved to, starting at 0
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="AdwTabView::setup-menu">
<description>
Emitted when a context menu is opened or closed for @page.

If the menu has been closed, @page will be set to `NULL`.

It can be used to set up menu actions before showing the menu, for example
disable actions not applicable to @page.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab view
</parameter_description>
</parameter>
<parameter name="page">
<parameter_description> a page of @self
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<enum name="AdwTabViewShortcuts">
<description>
Describes available shortcuts in an [class@TabView].

Shortcuts can be set with [property@TabView:shortcuts], or added/removed
individually with [method@TabView.add_shortcuts] and
[method@TabView.remove_shortcuts].

New values may be added to this enumeration over time.

Since: 1.2

</description>
<parameters>
<parameter name="ADW_TAB_VIEW_SHORTCUT_NONE">
<parameter_description> No shortcuts
</parameter_description>
</parameter>
<parameter name="ADW_TAB_VIEW_SHORTCUT_CONTROL_TAB">
<parameter_description>
&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Tab&lt;/kbd&gt; - switch to the next page, with looping
</parameter_description>
</parameter>
<parameter name="ADW_TAB_VIEW_SHORTCUT_CONTROL_SHIFT_TAB">
<parameter_description>
&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Tab&lt;/kbd&gt; - switch to the previous
page, with looping
</parameter_description>
</parameter>
<parameter name="ADW_TAB_VIEW_SHORTCUT_CONTROL_PAGE_UP">
<parameter_description>
&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Page Up&lt;/kbd&gt; - switch to the previous page
</parameter_description>
</parameter>
<parameter name="ADW_TAB_VIEW_SHORTCUT_CONTROL_PAGE_DOWN">
<parameter_description>
&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Page Down&lt;/kbd&gt; - switch to the next page
</parameter_description>
</parameter>
<parameter name="ADW_TAB_VIEW_SHORTCUT_CONTROL_HOME">
<parameter_description>
&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Home&lt;/kbd&gt; - switch to the first page
</parameter_description>
</parameter>
<parameter name="ADW_TAB_VIEW_SHORTCUT_CONTROL_END">
<parameter_description>
&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;End&lt;/kbd&gt; - switch to the last page
</parameter_description>
</parameter>
<parameter name="ADW_TAB_VIEW_SHORTCUT_CONTROL_SHIFT_PAGE_UP">
<parameter_description>
&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;Page Up&lt;/kbd&gt; - move the selected
page backward
</parameter_description>
</parameter>
<parameter name="ADW_TAB_VIEW_SHORTCUT_CONTROL_SHIFT_PAGE_DOWN">
<parameter_description>
&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;Page Down&lt;/kbd&gt; - move the selected
page forward
</parameter_description>
</parameter>
<parameter name="ADW_TAB_VIEW_SHORTCUT_CONTROL_SHIFT_HOME">
<parameter_description>
&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;Home&lt;/kbd&gt; - move the selected page
at the start
</parameter_description>
</parameter>
<parameter name="ADW_TAB_VIEW_SHORTCUT_CONTROL_SHIFT_END">
<parameter_description>
&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;End&lt;/kbd&gt; - move the current page at
the end
</parameter_description>
</parameter>
<parameter name="ADW_TAB_VIEW_SHORTCUT_ALT_DIGITS">
<parameter_description>
&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;1&lt;/kbd&gt;⋯&lt;kbd&gt;9&lt;/kbd&gt; - switch to pages 1-9
</parameter_description>
</parameter>
<parameter name="ADW_TAB_VIEW_SHORTCUT_ALT_ZERO">
<parameter_description>
&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;0&lt;/kbd&gt; - switch to page 10
</parameter_description>
</parameter>
<parameter name="ADW_TAB_VIEW_SHORTCUT_ALL_SHORTCUTS">
<parameter_description> All of the shortcuts
</parameter_description>
</parameter>
</parameters>
</enum>

<signal name="AdwToast::button-clicked">
<description>
Emitted after the button has been clicked.

It can be used as an alternative to setting an action.

Since: 1.2

</description>
<parameters>
</parameters>
<return></return>
</signal>

<signal name="AdwToast::dismissed">
<description>
Emitted when the toast has been dismissed.

Since: 1.0

</description>
<parameters>
</parameters>
<return></return>
</signal>

<enum name="AdwToastPriority">
<description>
[class@Toast] behavior when another toast is already displayed.

Since: 1.0

</description>
<parameters>
<parameter name="ADW_TOAST_PRIORITY_NORMAL">
<parameter_description> the toast will be queued if another toast is
already displayed.
</parameter_description>
</parameter>
<parameter name="ADW_TOAST_PRIORITY_HIGH">
<parameter_description> the toast will be displayed immediately, pushing
the previous toast into the queue instead.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="AdwViewSwitcherPolicy">
<description>
Describes the adaptive modes of [class@ViewSwitcher].

</description>
<parameters>
<parameter name="ADW_VIEW_SWITCHER_POLICY_NARROW">
<parameter_description> Force the narrow mode
</parameter_description>
</parameter>
<parameter name="ADW_VIEW_SWITCHER_POLICY_WIDE">
<parameter_description> Force the wide mode
</parameter_description>
</parameter>
</parameters>
</enum>

<function name="adw_about_window_add_acknowledgement_section">
<description>
Adds a section to the Acknowledgements page.

This can be used to acknowledge additional people and organizations for their
non-development contributions - for example, backers in a crowdfunded
project.

Each name may contain email addresses and URLs, see the introduction for more
details.

See also:

* [property@AboutWindow:developers]
* [property@AboutWindow:designers]
* [property@AboutWindow:artists]
* [property@AboutWindow:documenters]
* [property@AboutWindow:translator-credits]
* [method@AboutWindow.add_credit_section]

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an about window
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the section name
</parameter_description>
</parameter>
<parameter name="people">
<parameter_description> the list of names
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_about_window_add_credit_section">
<description>
Adds an extra section to the Credits page.

Extra sections are displayed below the standard categories.

Each name may contain email addresses and URLs, see the introduction for more
details.

See also:

* [property@AboutWindow:developers]
* [property@AboutWindow:designers]
* [property@AboutWindow:artists]
* [property@AboutWindow:documenters]
* [property@AboutWindow:translator-credits]
* [method@AboutWindow.add_acknowledgement_section]

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an about window
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the section name
</parameter_description>
</parameter>
<parameter name="people">
<parameter_description> the list of names
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_about_window_add_legal_section">
<description>
Adds an extra section to the Legal page.

Extra sections will be displayed below the application's own information.

The parameters @copyright, @license_type and @license will be used to present
the it the same way as [property@AboutWindow:copyright],
[property@AboutWindow:license-type] and [property@AboutWindow:license] are
for the application's own information.

See those properties for more details.

This can be useful to attribute the application dependencies or data.

Examples:

```c
adw_about_window_add_legal_section (ADW_ABOUT_WINDOW (about),
_(&quot;Copyright and a known license&quot;),
&quot;© 2022 Example&quot;,
GTK_LICENSE_LGPL_2_1,
NULL);

adw_about_window_add_legal_section (ADW_ABOUT_WINDOW (about),
_(&quot;Copyright and custom license&quot;),
&quot;© 2022 Example&quot;,
GTK_LICENSE_CUSTOM,
&quot;Custom license text&quot;);

adw_about_window_add_legal_section (ADW_ABOUT_WINDOW (about),
_(&quot;Copyright only&quot;),
&quot;© 2022 Example&quot;,
GTK_LICENSE_UNKNOWN,
NULL);

adw_about_window_add_legal_section (ADW_ABOUT_WINDOW (about),
_(&quot;Custom license only&quot;),
NULL,
GTK_LICENSE_CUSTOM,
&quot;Something completely custom here.&quot;);
```

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an about window
</parameter_description>
</parameter>
<parameter name="title">
<parameter_description> the name of the section
</parameter_description>
</parameter>
<parameter name="copyright">
<parameter_description> a copyright string
</parameter_description>
</parameter>
<parameter name="license_type">
<parameter_description> the type of license
</parameter_description>
</parameter>
<parameter name="license">
<parameter_description> custom license information
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_about_window_add_link">
<description>
Adds an extra link to the Details page.

Extra links are displayed under the comment and website.

Underlines in @title will be interpreted as indicating a mnemonic.

See [property@AboutWindow:website].

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an about window
</parameter_description>
</parameter>
<parameter name="title">
<parameter_description> the link title
</parameter_description>
</parameter>
<parameter name="url">
<parameter_description> the link URL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_about_window_get_application_icon">
<description>
Gets the name of the application icon for @self.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an about window
</parameter_description>
</parameter>
</parameters>
<return> the application icon name

</return>
</function>

<function name="adw_about_window_get_application_name">
<description>
Gets the application name for @self.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an about window
</parameter_description>
</parameter>
</parameters>
<return> the application name

</return>
</function>

<function name="adw_about_window_get_artists">
<description>
Gets the list of artists of the application.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an about window
</parameter_description>
</parameter>
</parameters>
<return> The list of artists

</return>
</function>

<function name="adw_about_window_get_comments">
<description>
Gets the comments about the application.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an about window
</parameter_description>
</parameter>
</parameters>
<return> the comments

</return>
</function>

<function name="adw_about_window_get_copyright">
<description>
Gets the copyright information for @self.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an about window
</parameter_description>
</parameter>
</parameters>
<return> the copyright information

</return>
</function>

<function name="adw_about_window_get_debug_info">
<description>
Gets the debug information for @self.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an about window
</parameter_description>
</parameter>
</parameters>
<return> the debug information

</return>
</function>

<function name="adw_about_window_get_debug_info_filename">
<description>
Gets the debug information filename for @self.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an about window
</parameter_description>
</parameter>
</parameters>
<return> the debug information filename

</return>
</function>

<function name="adw_about_window_get_designers">
<description>
Gets the list of designers of the application.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an about window
</parameter_description>
</parameter>
</parameters>
<return> The list of designers

</return>
</function>

<function name="adw_about_window_get_developer_name">
<description>
Gets the developer name for @self.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an about window
</parameter_description>
</parameter>
</parameters>
<return> the developer_name

</return>
</function>

<function name="adw_about_window_get_developers">
<description>
Gets the list of developers of the application.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an about window
</parameter_description>
</parameter>
</parameters>
<return> The list of developers

</return>
</function>

<function name="adw_about_window_get_documenters">
<description>
Gets the list of documenters of the application.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an about window
</parameter_description>
</parameter>
</parameters>
<return> The list of documenters

</return>
</function>

<function name="adw_about_window_get_issue_url">
<description>
Gets the issue tracker URL for @self.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an about window
</parameter_description>
</parameter>
</parameters>
<return> the issue tracker URL

</return>
</function>

<function name="adw_about_window_get_license">
<description>
Gets the license for @self.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an about window
</parameter_description>
</parameter>
</parameters>
<return> the license

</return>
</function>

<function name="adw_about_window_get_license_type">
<description>
Gets the license type for @self.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an about window
</parameter_description>
</parameter>
</parameters>
<return> the license type

</return>
</function>

<function name="adw_about_window_get_release_notes">
<description>
Gets the release notes for @self.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an about window
</parameter_description>
</parameter>
</parameters>
<return> the release notes

</return>
</function>

<function name="adw_about_window_get_release_notes_version">
<description>
Gets the version described by the application's release notes.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an about window
</parameter_description>
</parameter>
</parameters>
<return> the release notes version

</return>
</function>

<function name="adw_about_window_get_support_url">
<description>
Gets the URL of the support page for @self.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an about window
</parameter_description>
</parameter>
</parameters>
<return> the support page URL

</return>
</function>

<function name="adw_about_window_get_translator_credits">
<description>
Gets the translator credits string.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an about window
</parameter_description>
</parameter>
</parameters>
<return> The translator credits string

</return>
</function>

<function name="adw_about_window_get_version">
<description>
Gets the version for @self.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an about window
</parameter_description>
</parameter>
</parameters>
<return> the version

</return>
</function>

<function name="adw_about_window_get_website">
<description>
Gets the application website URL for @self.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an about window
</parameter_description>
</parameter>
</parameters>
<return> the website URL

</return>
</function>

<function name="adw_about_window_new">
<description>
Creates a new `AdwAboutWindow`.

Since: 1.2

</description>
<parameters>
</parameters>
<return> the newly created `AdwAboutWindow`

</return>
</function>

<function name="adw_about_window_set_application_icon">
<description>
Sets the name of the application icon for @self.

The icon is displayed at the top of the main page.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an about window
</parameter_description>
</parameter>
<parameter name="application_icon">
<parameter_description> the application icon name
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_about_window_set_application_name">
<description>
Sets the application name for @self.

The name is displayed at the top of the main page.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an about window
</parameter_description>
</parameter>
<parameter name="application_name">
<parameter_description> the application name
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_about_window_set_artists">
<description>
Sets the list of artists of the application.

It will be displayed on the Credits page.

Each name may contain email addresses and URLs, see the introduction for more
details.

See also:

* [property@AboutWindow:developers]
* [property@AboutWindow:designers]
* [property@AboutWindow:documenters]
* [property@AboutWindow:translator-credits]
* [method@AboutWindow.add_credit_section]
* [method@AboutWindow.add_acknowledgement_section]

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an about window
</parameter_description>
</parameter>
<parameter name="artists">
<parameter_description> the list of artists
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_about_window_set_comments">
<description>
Sets the comments about the application.

Comments will be shown on the Details page, above links.

Unlike [property@Gtk.AboutDialog:comments], this string can be long and
detailed. It can also contain links and Pango markup.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an about window
</parameter_description>
</parameter>
<parameter name="comments">
<parameter_description> the comments
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_about_window_set_copyright">
<description>
Sets the copyright information for @self.

This should be a short string of one or two lines, for example:
`© 2022 Example`.

The copyright information will be displayed on the Legal page, before the
application license.

[method@AboutWindow.add_legal_section] can be used to add copyright
information for the application dependencies or other components.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an about window
</parameter_description>
</parameter>
<parameter name="copyright">
<parameter_description> the copyright information
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_about_window_set_debug_info">
<description>
Sets the debug information for @self.

Debug information will be shown on the Troubleshooting page. It's intended
to be attached to issue reports when reporting issues against the
application.

`AdwAboutWindow` provides a quick way to save debug information to a file.
When saving, [property@AboutWindow:debug-info-filename] would be used as
the suggested filename.

Debug information cannot contain markup or links.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an about window
</parameter_description>
</parameter>
<parameter name="debug_info">
<parameter_description> the debug information
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_about_window_set_debug_info_filename">
<description>
Sets the debug information filename for @self.

It will be used as the suggested filename when saving debug information to a
file.

See [property@AboutWindow:debug-info].

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an about window
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description> the debug info filename
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_about_window_set_designers">
<description>
Sets the list of designers of the application.

It will be displayed on the Credits page.

Each name may contain email addresses and URLs, see the introduction for more
details.

See also:

* [property@AboutWindow:developers]
* [property@AboutWindow:artists]
* [property@AboutWindow:documenters]
* [property@AboutWindow:translator-credits]
* [method@AboutWindow.add_credit_section]
* [method@AboutWindow.add_acknowledgement_section]

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an about window
</parameter_description>
</parameter>
<parameter name="designers">
<parameter_description> the list of designers
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_about_window_set_developer_name">
<description>
Sets the developer name for @self.

The developer name is displayed on the main page, under the application name.

If the application is developed by multiple people, the developer name can be
set to values like &quot;AppName team&quot;, &quot;AppName developers&quot; or
&quot;The AppName project&quot;, and the individual contributors can be listed on the
Credits page, with [property@AboutWindow:developers] and related properties.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an about window
</parameter_description>
</parameter>
<parameter name="developer_name">
<parameter_description> the developer name
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_about_window_set_developers">
<description>
Sets the list of developers of the application.

It will be displayed on the Credits page.

Each name may contain email addresses and URLs, see the introduction for more
details.

See also:

* [property@AboutWindow:designers]
* [property@AboutWindow:artists]
* [property@AboutWindow:documenters]
* [property@AboutWindow:translator-credits]
* [method@AboutWindow.add_credit_section]
* [method@AboutWindow.add_acknowledgement_section]

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an about window
</parameter_description>
</parameter>
<parameter name="developers">
<parameter_description> the list of developers
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_about_window_set_documenters">
<description>
Sets the list of documenters of the application.

It will be displayed on the Credits page.

Each name may contain email addresses and URLs, see the introduction for more
details.

See also:

* [property@AboutWindow:developers]
* [property@AboutWindow:designers]
* [property@AboutWindow:artists]
* [property@AboutWindow:translator-credits]
* [method@AboutWindow.add_credit_section]
* [method@AboutWindow.add_acknowledgement_section]

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an about window
</parameter_description>
</parameter>
<parameter name="documenters">
<parameter_description> the list of documenters
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_about_window_set_issue_url">
<description>
Sets the issue tracker URL for @self.

The issue tracker link is displayed on the main page.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an about window
</parameter_description>
</parameter>
<parameter name="issue_url">
<parameter_description> the issue tracker URL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_about_window_set_license">
<description>
Sets the license for @self.

This can be used to set a custom text for the license if it can't be set via
[property@AboutWindow:license-type].

When set, [property@AboutWindow:license-type] will be set to
`GTK_LICENSE_CUSTOM`.

The license text will be displayed on the Legal page, below the copyright
information.

License text can contain Pango markup and links.

[method@AboutWindow.add_legal_section] can be used to add license information
for the application dependencies or other components.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an about window
</parameter_description>
</parameter>
<parameter name="license">
<parameter_description> the license
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_about_window_set_license_type">
<description>
Sets the license for @self from a list of known licenses.

If the application's license is not in the list,
[property@AboutWindow:license] can be used instead. The license type will be
automatically set to `GTK_LICENSE_CUSTOM` in that case.

If @license_type is `GTK_LICENSE_UNKNOWN`, no information will be displayed.

If @license_type is different from `GTK_LICENSE_CUSTOM`.
[property@AboutWindow:license] will be cleared out.

The license description will be displayed on the Legal page, below the
copyright information.

[method@AboutWindow.add_legal_section] can be used to add license information
for the application dependencies or other components.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an about window
</parameter_description>
</parameter>
<parameter name="license_type">
<parameter_description> the license type
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_about_window_set_release_notes">
<description>
Sets the release notes for @self.

Release notes are displayed on the the What's New page.

Release notes are formatted the same way as
[AppStream descriptions](https://freedesktop.org/software/appstream/docs/chap-Metadata.html#tag-description).

The supported formatting options are:

* Paragraph (`&lt;p&gt;`)
* Ordered list (`&lt;ol&gt;`), with list items (`&lt;li&gt;`)
* Unordered list (`&lt;ul&gt;`), with list items (`&lt;li&gt;`)

Within paragraphs and list items, emphasis (`&lt;em&gt;`) and inline code
(`&lt;code&gt;`) text styles are supported. The emphasis is rendered in italic,
while inline code is shown in a monospaced font.

Any text outside paragraphs or list items is ignored.

Nested lists are not supported.

`AdwAboutWindow` displays the version above the release notes. If set, the
[property@AboutWindow:release-notes-version] of the property will be used
as the version; otherwise, [property@AboutWindow:version] is used.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an about window
</parameter_description>
</parameter>
<parameter name="release_notes">
<parameter_description> the release notes
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_about_window_set_release_notes_version">
<description>
Sets the version described by the application's release notes.

The release notes version is displayed on the What's New page, above the
release notes.

If not set, [property@AboutWindow:version] will be used instead.

For example, an application with the current version 2.0.2 might want to
keep the release notes from 2.0.0, and set the release notes version
accordingly.

See [property@AboutWindow:release-notes].

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an about window
</parameter_description>
</parameter>
<parameter name="version">
<parameter_description> the release notes version
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_about_window_set_support_url">
<description>
Sets the URL of the support page for @self.

The support page link is displayed on the main page.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an about window
</parameter_description>
</parameter>
<parameter name="support_url">
<parameter_description> the support page URL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_about_window_set_translator_credits">
<description>
Sets the translator credits string.

It will be displayed on the Credits page.

This string should be `&quot;translator-credits&quot;` or `&quot;translator_credits&quot;` and
should be marked as translatable.

The string may contain email addresses and URLs, see the introduction for
more details.

See also:

* [property@AboutWindow:developers]
* [property@AboutWindow:designers]
* [property@AboutWindow:artists]
* [property@AboutWindow:documenters]
* [method@AboutWindow.add_credit_section]
* [method@AboutWindow.add_acknowledgement_section]

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an about window
</parameter_description>
</parameter>
<parameter name="translator_credits">
<parameter_description> the translator credits
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_about_window_set_version">
<description>
Sets the version for @self.

The version is displayed on the main page.

If [property@AboutWindow:release-notes-version] is not set, the version will
also be displayed above the release notes on the What's New page.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an about window
</parameter_description>
</parameter>
<parameter name="version">
<parameter_description> the version
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_about_window_set_website">
<description>
Sets the application website URL for @self.

Website is displayed on the Details page, below comments, or on the main page
if the Details page doesn't have any other content.

Applications can add other links below, see [method@AboutWindow.add_link].

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an about window
</parameter_description>
</parameter>
<parameter name="website">
<parameter_description> the website URL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_action_row_activate">
<description>
Activates @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an action row
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_action_row_add_prefix">
<description>
Adds a prefix widget to @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an action row
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> a widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_action_row_add_suffix">
<description>
Adds a suffix widget to @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an action row
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> a widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_action_row_expander">
<description>
Removes a child from @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an expander row
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> the child to be removed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_action_row_get_activatable_widget">
<description>
Gets the widget activated when @self is activated.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an action row
</parameter_description>
</parameter>
</parameters>
<return> the activatable widget for @self

</return>
</function>

<function name="adw_action_row_get_icon_name">
<description>
Gets the icon name for @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an action row
</parameter_description>
</parameter>
</parameters>
<return> the icon name for @self

</return>
</function>

<function name="adw_action_row_get_subtitle">
<description>
Gets the subtitle for @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an action row
</parameter_description>
</parameter>
</parameters>
<return> the subtitle for @self

</return>
</function>

<function name="adw_action_row_get_subtitle_lines">
<description>
Gets the number of lines at the end of which the subtitle label will be
ellipsized.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an action row
</parameter_description>
</parameter>
</parameters>
<return> the number of lines at the end of which the subtitle label will be
ellipsized

</return>
</function>

<function name="adw_action_row_get_title_lines">
<description>
Gets the number of lines at the end of which the title label will be
ellipsized.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an action row
</parameter_description>
</parameter>
</parameters>
<return> the number of lines at the end of which the title label will be
ellipsized

</return>
</function>

<function name="adw_action_row_new">
<description>
Creates a new `AdwActionRow`.

Since: 1.0

</description>
<parameters>
</parameters>
<return> the newly created `AdwActionRow`

</return>
</function>

<function name="adw_action_row_remove">
<description>
Removes a child from @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an action row
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> the child to be removed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_action_row_set_activatable_widget">
<description>
Sets the widget to activate when @self is activated.

The row can be activated either by clicking on it, calling
[method@ActionRow.activate], or via mnemonics in the title or the subtitle.
See the [property@PreferencesRow:use-underline] property to enable mnemonics.

The target widget will be activated by emitting the
[signal@Gtk.Widget::mnemonic-activate] signal on it.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an action row
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> the target widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_action_row_set_icon_name">
<description>
Sets the icon name for @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an action row
</parameter_description>
</parameter>
<parameter name="icon_name">
<parameter_description> the icon name
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_action_row_set_subtitle">
<description>
Sets the subtitle for @self.

The subtitle is interpreted as Pango markup unless
[property@PreferencesRow:use-markup] is set to `FALSE`.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an action row
</parameter_description>
</parameter>
<parameter name="subtitle">
<parameter_description> the subtitle
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_action_row_set_subtitle_lines">
<description>
Sets the number of lines at the end of which the subtitle label will be
ellipsized.

If the value is 0, the number of lines won't be limited.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an action row
</parameter_description>
</parameter>
<parameter name="subtitle_lines">
<parameter_description> the number of lines at the end of which the subtitle label will be ellipsized
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_action_row_set_title_lines">
<description>
Sets the number of lines at the end of which the title label will be
ellipsized.

If the value is 0, the number of lines won't be limited.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an action row
</parameter_description>
</parameter>
<parameter name="title_lines">
<parameter_description> the number of lines at the end of which the title label will be ellipsized
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_animation_get_state">
<description>
Gets the current value of @self.

The state indicates whether @self is currently playing, paused, finished or
hasn't been started yet.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an animation
</parameter_description>
</parameter>
</parameters>
<return> the animation value

</return>
</function>

<function name="adw_animation_get_target">
<description>
Gets the target @self animates.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an animation
</parameter_description>
</parameter>
</parameters>
<return> the animation target

</return>
</function>

<function name="adw_animation_get_value">
<description>
Gets the current value of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an animation
</parameter_description>
</parameter>
</parameters>
<return> the current value

</return>
</function>

<function name="adw_animation_get_widget">
<description>
Gets the widget @self was created for.

It provides the frame clock for the animation. It's not strictly necessary
for this widget to be same as the one being animated.

The widget must be mapped in order for the animation to work. If it's not
mapped, or if it gets unmapped during an ongoing animation, the animation
will be automatically skipped.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an animation
</parameter_description>
</parameter>
</parameters>
<return> the animation widget

</return>
</function>

<function name="adw_animation_pause">
<description>
Pauses a playing animation for @self.

Does nothing if the current state of @self isn't `ADW_ANIMATION_PLAYING`.

Sets [property@Animation:state] to `ADW_ANIMATION_PAUSED`.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an animation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_animation_play">
<description>
Starts the animation for @self.

If the animation is playing, paused or has been completed, restarts it from
the beginning. This allows to easily play an animation regardless of whether
it's already playing or not.

Sets [property@Animation:state] to `ADW_ANIMATION_PLAYING`.

The animation will be automatically skipped if [property@Animation:widget] is
unmapped, or if [property@Gtk.Settings:gtk-enable-animations] is `FALSE`.

As such, it's not guaranteed that the animation will actually run. For
example, when using [func@GLib.idle_add] and starting an animation
immediately afterwards, it's entirely possible that the idle callback will
run after the animation has already finished, and not while it's playing.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an animation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_animation_reset">
<description>
Resets the animation for @self.

Sets [property@Animation:state] to `ADW_ANIMATION_IDLE`.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an animation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_animation_resume">
<description>
Resumes a paused animation for @self.

This function must only be used if the animation has been paused with
[method@Animation.pause].

Sets [property@Animation:state] to `ADW_ANIMATION_PLAYING`.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an animation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_animation_set_target">
<description>
Sets the target @self animates to @target.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an animation
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> an animation target
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_animation_skip">
<description>
Skips the animation for @self.

If the animation hasn't been started yet, is playing, or is paused, instantly
skips the animation to the end and causes [signal@Animation::done] to be
emitted.

Sets [property@Animation:state] to `ADW_ANIMATION_FINISHED`.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an animation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_application_get_style_manager">
<description>
Gets the style manager for @self.

This is a convenience property allowing to access `AdwStyleManager` through
property bindings or expressions.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an application
</parameter_description>
</parameter>
</parameters>
<return> the style manager

</return>
</function>

<function name="adw_application_new">
<description>
Creates a new `AdwApplication`.

If `application_id` is not `NULL`, then it must be valid. See
[func@Gio.Application.id_is_valid].

If no application ID is given then some features (most notably application
uniqueness) will be disabled.

Since: 1.0

</description>
<parameters>
<parameter name="application_id">
<parameter_description> The application ID
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> The application flags
</parameter_description>
</parameter>
</parameters>
<return> the newly created `AdwApplication`

</return>
</function>

<function name="adw_application_window_get_content">
<description>
Gets the content widget of @self.

This method should always be used instead of [method@Gtk.Window.get_child].

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an application window
</parameter_description>
</parameter>
</parameters>
<return> the content widget of @self

</return>
</function>

<function name="adw_application_window_new">
<description>
Creates a new `AdwApplicationWindow` for @app.

Since: 1.0

</description>
<parameters>
<parameter name="app">
<parameter_description> an application instance
</parameter_description>
</parameter>
</parameters>
<return> the newly created `AdwApplicationWindow`

</return>
</function>

<function name="adw_application_window_set_content">
<description>
Sets the content widget of @self.

This method should always be used instead of [method@Gtk.Window.set_child].

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an application window
</parameter_description>
</parameter>
<parameter name="content">
<parameter_description> the content widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_avatar_draw_to_texture">
<description>
Renders @self into a [class@Gdk.Texture] at @scale_factor.

This can be used to export the fallback avatar.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an avatar
</parameter_description>
</parameter>
<parameter name="scale_factor">
<parameter_description> The scale factor
</parameter_description>
</parameter>
</parameters>
<return> the texture

</return>
</function>

<function name="adw_avatar_get_custom_image">
<description>
Gets the custom image paintable.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an avatar
</parameter_description>
</parameter>
</parameters>
<return> the custom image

</return>
</function>

<function name="adw_avatar_get_icon_name">
<description>
Gets the name of an icon to use as a fallback.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an avatar
</parameter_description>
</parameter>
</parameters>
<return> the icon name

</return>
</function>

<function name="adw_avatar_get_show_initials">
<description>
Gets whether initials are used instead of an icon on the fallback avatar.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an avatar
</parameter_description>
</parameter>
</parameters>
<return> whether initials are used instead of an icon as fallback

</return>
</function>

<function name="adw_avatar_get_size">
<description>
Gets the size of the avatar.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an avatar
</parameter_description>
</parameter>
</parameters>
<return> the size of the avatar

</return>
</function>

<function name="adw_avatar_get_text">
<description>
Gets the text used to generate the fallback initials and color.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an avatar
</parameter_description>
</parameter>
</parameters>
<return> the text used to generate the fallback initials and
color

</return>
</function>

<function name="adw_avatar_new">
<description>
Creates a new `AdwAvatar`.

Since: 1.0

</description>
<parameters>
<parameter name="size">
<parameter_description> The size of the avatar
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the text used to get the initials and color
</parameter_description>
</parameter>
<parameter name="show_initials">
<parameter_description> whether to use initials instead of an icon as fallback
</parameter_description>
</parameter>
</parameters>
<return> the newly created `AdwAvatar`

</return>
</function>

<function name="adw_avatar_set_custom_image">
<description>
Sets the custom image paintable.

Custom image is displayed instead of initials or icon.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an avatar
</parameter_description>
</parameter>
<parameter name="custom_image">
<parameter_description> a custom image
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_avatar_set_icon_name">
<description>
Sets the name of an icon to use as a fallback.

If no name is set, `avatar-default-symbolic` will be used.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an avatar
</parameter_description>
</parameter>
<parameter name="icon_name">
<parameter_description> the icon name
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_avatar_set_show_initials">
<description>
Sets whether to use initials instead of an icon on the fallback avatar.

See [property@Avatar:icon-name] for how to change the fallback icon.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an avatar
</parameter_description>
</parameter>
<parameter name="show_initials">
<parameter_description> whether to use initials instead of an icon as fallback
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_avatar_set_size">
<description>
Sets the size of the avatar.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an avatar
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> The size of the avatar
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_avatar_set_text">
<description>
Sets the text used to generate the fallback initials and color.

It's only used to generate the color if [property@Avatar:show-initials] is
`FALSE`.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an avatar
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the text used to get the initials and color
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_bin_get_child">
<description>
Gets the child widget of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a bin
</parameter_description>
</parameter>
</parameters>
<return> the child widget of @self

</return>
</function>

<function name="adw_bin_new">
<description>
Creates a new `AdwBin`.

Since: 1.0

</description>
<parameters>
</parameters>
<return> the new created `AdwBin`

</return>
</function>

<function name="adw_bin_set_child">
<description>
Sets the child widget of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a bin
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the child widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_button_content_get_icon_name">
<description>
Gets the name of the displayed icon.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a button content
</parameter_description>
</parameter>
</parameters>
<return> the icon name

</return>
</function>

<function name="adw_button_content_get_label">
<description>
Gets the displayed label.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a button content
</parameter_description>
</parameter>
</parameters>
<return> the label

</return>
</function>

<function name="adw_button_content_get_use_underline">
<description>
Gets whether an underline in the text indicates a mnemonic.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a button content
</parameter_description>
</parameter>
</parameters>
<return> whether an underline in the text indicates a mnemonic

</return>
</function>

<function name="adw_button_content_new">
<description>
Creates a new `AdwButtonContent`.

Since: 1.0

</description>
<parameters>
</parameters>
<return> the new created `AdwButtonContent`

</return>
</function>

<function name="adw_button_content_set_icon_name">
<description>
Sets the name of the displayed icon.

If empty, the icon is not shown.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a button content
</parameter_description>
</parameter>
<parameter name="icon_name">
<parameter_description> the new icon name
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_button_content_set_label">
<description>
Sets the displayed label.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a button content
</parameter_description>
</parameter>
<parameter name="label">
<parameter_description> the new label
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_button_content_set_use_underline">
<description>
Sets whether an underline in the text indicates a mnemonic.

The mnemonic can be used to activate the parent button.

See [property@ButtonContent:label].

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a button content
</parameter_description>
</parameter>
<parameter name="use_underline">
<parameter_description> whether an underline in the text indicates a mnemonic
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_callback_animation_target_new">
<description>
Creates a new `AdwAnimationTarget` that calls the given @callback during
the animation.

Since: 1.0

</description>
<parameters>
<parameter name="callback">
<parameter_description> the callback to call
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to be passed to @callback
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> the function to be called when the
callback action is finalized
</parameter_description>
</parameter>
</parameters>
<return> the newly created callback target

</return>
</function>

<function name="adw_carousel_append">
<description>
Appends @child to @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a carousel
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a widget to add
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_carousel_get_allow_long_swipes">
<description>
Gets whether to allow swiping for more than one page at a time.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a carousel
</parameter_description>
</parameter>
</parameters>
<return> `TRUE` if long swipes are allowed

</return>
</function>

<function name="adw_carousel_get_allow_mouse_drag">
<description>
Sets whether @self can be dragged with mouse pointer.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a carousel
</parameter_description>
</parameter>
</parameters>
<return> whether @self can be dragged with mouse pointer

</return>
</function>

<function name="adw_carousel_get_allow_scroll_wheel">
<description>
Gets whether @self will respond to scroll wheel events.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a carousel
</parameter_description>
</parameter>
</parameters>
<return> `TRUE` if @self will respond to scroll wheel events

</return>
</function>

<function name="adw_carousel_get_interactive">
<description>
Gets whether @self can be navigated.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a carousel
</parameter_description>
</parameter>
</parameters>
<return> whether @self can be navigated

</return>
</function>

<function name="adw_carousel_get_n_pages">
<description>
Gets the number of pages in @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a carousel
</parameter_description>
</parameter>
</parameters>
<return> the number of pages in @self

</return>
</function>

<function name="adw_carousel_get_nth_page">
<description>
Gets the page at position @n.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a carousel
</parameter_description>
</parameter>
<parameter name="n">
<parameter_description> index of the page
</parameter_description>
</parameter>
</parameters>
<return> the page

</return>
</function>

<function name="adw_carousel_get_position">
<description>
Gets current scroll position in @self, unitless.

1 matches 1 page. Use [method@Carousel.scroll_to] for changing it.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a carousel
</parameter_description>
</parameter>
</parameters>
<return> the scroll position

</return>
</function>

<function name="adw_carousel_get_reveal_duration">
<description>
Gets the page reveal duration, in milliseconds.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a carousel
</parameter_description>
</parameter>
</parameters>
<return> the duration

</return>
</function>

<function name="adw_carousel_get_scroll_params">
<description>
Gets the scroll animation spring parameters for @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a carousel
</parameter_description>
</parameter>
</parameters>
<return> the animation parameters

</return>
</function>

<function name="adw_carousel_get_spacing">
<description>
Gets spacing between pages in pixels.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a carousel
</parameter_description>
</parameter>
</parameters>
<return> spacing between pages

</return>
</function>

<function name="adw_carousel_indicator_dots_get_carousel">
<description>
Gets the displayed carousel.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an indicator
</parameter_description>
</parameter>
</parameters>
<return> the displayed carousel

</return>
</function>

<function name="adw_carousel_indicator_dots_new">
<description>
Creates a new `AdwCarouselIndicatorDots`.

Since: 1.0

</description>
<parameters>
</parameters>
<return> the newly created `AdwCarouselIndicatorDots`

</return>
</function>

<function name="adw_carousel_indicator_dots_set_carousel">
<description>
Sets the displayed carousel.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an indicator
</parameter_description>
</parameter>
<parameter name="carousel">
<parameter_description> a carousel
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_carousel_indicator_lines_get_carousel">
<description>
Gets the displayed carousel.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an indicator
</parameter_description>
</parameter>
</parameters>
<return> the displayed carousel

</return>
</function>

<function name="adw_carousel_indicator_lines_new">
<description>
Creates a new `AdwCarouselIndicatorLines`.

Since: 1.0

</description>
<parameters>
</parameters>
<return> the newly created `AdwCarouselIndicatorLines`

</return>
</function>

<function name="adw_carousel_indicator_lines_set_carousel">
<description>
Sets the displayed carousel.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an indicator
</parameter_description>
</parameter>
<parameter name="carousel">
<parameter_description> a carousel
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_carousel_insert">
<description>
Inserts @child into @self at position @position.

If position is -1, or larger than the number of pages,
@child will be appended to the end.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a carousel
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a widget to add
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the position to insert @child at
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_carousel_new">
<description>
Creates a new `AdwCarousel`.

Since: 1.0

</description>
<parameters>
</parameters>
<return> the newly created `AdwCarousel`

</return>
</function>

<function name="adw_carousel_prepend">
<description>
Prepends @child to @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a carousel
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a widget to add
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_carousel_remove">
<description>
Removes @child from @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a carousel
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a widget to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_carousel_reorder">
<description>
Moves @child into position @position.

If position is -1, or larger than the number of pages, @child will be moved
at the end.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a carousel
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a widget to add
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the position to move @child to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_carousel_scroll_to">
<description>
Scrolls to @widget.

If @animate is `TRUE`, the transition will be animated.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a carousel
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> a child of @self
</parameter_description>
</parameter>
<parameter name="animate">
<parameter_description> whether to animate the transition
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_carousel_set_allow_long_swipes">
<description>
Sets whether to allow swiping for more than one page at a time.

If @allow_long_swipes is `FALSE`, each swipe can only move to the adjacent
pages.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a carousel
</parameter_description>
</parameter>
<parameter name="allow_long_swipes">
<parameter_description> whether to allow long swipes
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_carousel_set_allow_mouse_drag">
<description>
Sets whether @self can be dragged with mouse pointer.

If @allow_mouse_drag is `FALSE`, dragging is only available on touch.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a carousel
</parameter_description>
</parameter>
<parameter name="allow_mouse_drag">
<parameter_description> whether @self can be dragged with mouse pointer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_carousel_set_allow_scroll_wheel">
<description>
Sets whether @self will respond to scroll wheel events.

If @allow_scroll_wheel is `FALSE`, wheel events will be ignored.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a carousel
</parameter_description>
</parameter>
<parameter name="allow_scroll_wheel">
<parameter_description> whether @self will respond to scroll wheel events
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_carousel_set_interactive">
<description>
Sets whether @self can be navigated.

This can be used to temporarily disable the carousel to only allow navigating
it in a certain state.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a carousel
</parameter_description>
</parameter>
<parameter name="interactive">
<parameter_description> whether @self can be navigated
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_carousel_set_reveal_duration">
<description>
Sets the page reveal duration, in milliseconds.

Reveal duration is used when animating adding or removing pages.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a carousel
</parameter_description>
</parameter>
<parameter name="reveal_duration">
<parameter_description> the new reveal duration value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_carousel_set_scroll_params">
<description>
Sets the scroll animation spring parameters for @self.

The default value is equivalent to:

```c
adw_spring_params_new (1, 0.5, 500)
```

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a carousel
</parameter_description>
</parameter>
<parameter name="params">
<parameter_description> the new parameters
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_carousel_set_spacing">
<description>
Sets spacing between pages in pixels.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a carousel
</parameter_description>
</parameter>
<parameter name="spacing">
<parameter_description> the new spacing value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_clamp_get_child">
<description>
Gets the child widget of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a clamp
</parameter_description>
</parameter>
</parameters>
<return> the child widget of @self

</return>
</function>

<function name="adw_clamp_get_maximum_size">
<description>
Gets the maximum size allocated to the child.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a clamp
</parameter_description>
</parameter>
</parameters>
<return> the maximum size to allocate to the child

</return>
</function>

<function name="adw_clamp_get_tightening_threshold">
<description>
Gets the size above which the child is clamped.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a clamp
</parameter_description>
</parameter>
</parameters>
<return> the size above which the child is clamped

</return>
</function>

<function name="adw_clamp_layout_get_maximum_size">
<description>
Gets the maximum size allocated to the children.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a clamp layout
</parameter_description>
</parameter>
</parameters>
<return> the maximum size to allocate to the children

</return>
</function>

<function name="adw_clamp_layout_get_tightening_threshold">
<description>
Gets the size above which the children are clamped.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a clamp layout
</parameter_description>
</parameter>
</parameters>
<return> the size above which the children are clamped

</return>
</function>

<function name="adw_clamp_layout_new">
<description>
Creates a new `AdwClampLayout`.

Since: 1.0

</description>
<parameters>
</parameters>
<return> the newly created `AdwClampLayout`

</return>
</function>

<function name="adw_clamp_layout_set_maximum_size">
<description>
Sets the maximum size allocated to the children.

It is the width if the layout is horizontal, or the height if it is vertical.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a clamp layout
</parameter_description>
</parameter>
<parameter name="maximum_size">
<parameter_description> the maximum size
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_clamp_layout_set_tightening_threshold">
<description>
Sets the size above which the children are clamped.

Starting from this size, the layout will tighten its grip on the children,
slowly allocating less and less of the available size up to the maximum
allocated size. Below that threshold and below the maximum size, the children
will be allocated all the available size.

If the threshold is greater than the maximum size to allocate to the
children, they will be allocated the whole size up to the maximum. If the
threshold is lower than the minimum size to allocate to the children, that
size will be used as the tightening threshold.

Effectively, tightening the grip on a child before it reaches its maximum
size makes transitions to and from the maximum size smoother when resizing.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a clamp layout
</parameter_description>
</parameter>
<parameter name="tightening_threshold">
<parameter_description> the tightening threshold
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_clamp_new">
<description>
Creates a new `AdwClamp`.

Since: 1.0

</description>
<parameters>
</parameters>
<return> the newly created `AdwClamp`

</return>
</function>

<function name="adw_clamp_scrollable_get_child">
<description>
Gets the child widget of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a clamp scrollable
</parameter_description>
</parameter>
</parameters>
<return> the child widget of @self

</return>
</function>

<function name="adw_clamp_scrollable_get_maximum_size">
<description>
Gets the maximum size allocated to the child.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a clamp scrollable
</parameter_description>
</parameter>
</parameters>
<return> the maximum size to allocate to the child

</return>
</function>

<function name="adw_clamp_scrollable_get_tightening_threshold">
<description>
Gets the size above which the child is clamped.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a clamp scrollable
</parameter_description>
</parameter>
</parameters>
<return> the size above which the child is clamped

</return>
</function>

<function name="adw_clamp_scrollable_new">
<description>
Creates a new `AdwClampScrollable`.

Since: 1.0

</description>
<parameters>
</parameters>
<return> the newly created `AdwClampScrollable`

</return>
</function>

<function name="adw_clamp_scrollable_set_child">
<description>
Sets the child widget of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a clamp scrollable
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the child widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_clamp_scrollable_set_maximum_size">
<description>
Sets the maximum size allocated to the child.

It is the width if the clamp is horizontal, or the height if it is vertical.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a clamp scrollable
</parameter_description>
</parameter>
<parameter name="maximum_size">
<parameter_description> the maximum size
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_clamp_scrollable_set_tightening_threshold">
<description>
Sets the size above which the child is clamped.

Starting from this size, the clamp will tighten its grip on the child, slowly
allocating less and less of the available size up to the maximum allocated
size. Below that threshold and below the maximum width, the child will be
allocated all the available size.

If the threshold is greater than the maximum size to allocate to the child,
the child will be allocated all the width up to the maximum. If the threshold
is lower than the minimum size to allocate to the child, that size will be
used as the tightening threshold.

Effectively, tightening the grip on the child before it reaches its maximum
size makes transitions to and from the maximum size smoother when resizing.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a clamp scrollable
</parameter_description>
</parameter>
<parameter name="tightening_threshold">
<parameter_description> the tightening threshold
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_clamp_set_child">
<description>
Sets the child widget of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a clamp
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the child widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_clamp_set_maximum_size">
<description>
Sets the maximum size allocated to the child.

It is the width if the clamp is horizontal, or the height if it is vertical.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a clamp
</parameter_description>
</parameter>
<parameter name="maximum_size">
<parameter_description> the maximum size
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_clamp_set_tightening_threshold">
<description>
Sets the size above which the child is clamped.

Starting from this size, the clamp will tighten its grip on the child, slowly
allocating less and less of the available size up to the maximum allocated
size. Below that threshold and below the maximum size, the child will be
allocated all the available size.

If the threshold is greater than the maximum size to allocate to the child,
the child will be allocated all the size up to the maximum. If the threshold
is lower than the minimum size to allocate to the child, that size will be
used as the tightening threshold.

Effectively, tightening the grip on the child before it reaches its maximum
size makes transitions to and from the maximum size smoother when resizing.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a clamp
</parameter_description>
</parameter>
<parameter name="tightening_threshold">
<parameter_description> the tightening threshold
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_combo_row_get_expression">
<description>
Gets the expression used to obtain strings from items.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a combo row
</parameter_description>
</parameter>
</parameters>
<return> the expression used to obtain strings from items

</return>
</function>

<function name="adw_combo_row_get_factory">
<description>
Gets the factory for populating list items.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a combo row
</parameter_description>
</parameter>
</parameters>
<return> the factory in use

</return>
</function>

<function name="adw_combo_row_get_list_factory">
<description>
Gets the factory for populating list items in the popup.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a combo row
</parameter_description>
</parameter>
</parameters>
<return> the factory in use

</return>
</function>

<function name="adw_combo_row_get_model">
<description>
Gets the model that provides the displayed items.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a combo row
</parameter_description>
</parameter>
</parameters>
<return> The model in use

</return>
</function>

<function name="adw_combo_row_get_selected">
<description>
Gets the position of the selected item.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a combo row
</parameter_description>
</parameter>
</parameters>
<return> the position of the selected item, or
[const@Gtk.INVALID_LIST_POSITION] if no item is selected

</return>
</function>

<function name="adw_combo_row_get_selected_item">
<description>
Gets the selected item.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a combo row
</parameter_description>
</parameter>
</parameters>
<return> the selected item

</return>
</function>

<function name="adw_combo_row_get_use_subtitle">
<description>
Gets whether to use the current value as the subtitle.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a combo row
</parameter_description>
</parameter>
</parameters>
<return> whether to use the current value as the subtitle

</return>
</function>

<function name="adw_combo_row_new">
<description>
Creates a new `AdwComboRow`.

Since: 1.0

</description>
<parameters>
</parameters>
<return> the newly created `AdwComboRow`

</return>
</function>

<function name="adw_combo_row_set_expression">
<description>
Sets the expression used to obtain strings from items.

The expression must have a value type of `G_TYPE_STRING`.

It's used to bind strings to labels produced by the default factory if
[property@ComboRow:factory] is not set, or when
[property@ComboRow:use-subtitle] is set to `TRUE`.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a combo row
</parameter_description>
</parameter>
<parameter name="expression">
<parameter_description> an expression
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_combo_row_set_factory">
<description>
Sets the factory for populating list items.

This factory is always used for the item in the row. It is also used for
items in the popup unless [property@ComboRow:list-factory] is set.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a combo row
</parameter_description>
</parameter>
<parameter name="factory">
<parameter_description> the factory to use
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_combo_row_set_list_factory">
<description>
Sets the factory for populating list items in the popup.

If this is not set, [property@ComboRow:factory] is used.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a combo row
</parameter_description>
</parameter>
<parameter name="factory">
<parameter_description> the factory to use
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_combo_row_set_model">
<description>
Sets the model that provides the displayed items.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a combo row
</parameter_description>
</parameter>
<parameter name="model">
<parameter_description> the model to use
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_combo_row_set_selected">
<description>
Selects the item at the given position.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a combo row
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the position of the item to select, or
[const@Gtk.INVALID_LIST_POSITION]
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_combo_row_set_use_subtitle">
<description>
Sets whether to use the current value as the subtitle.

If you use a custom list item factory, you will need to give the row a
name conversion expression with [property@ComboRow:expression].

If set to `TRUE`, you should not access [property@ActionRow:subtitle].

The subtitle is interpreted as Pango markup if
[property@PreferencesRow:use-markup] is set to `TRUE`.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a combo row
</parameter_description>
</parameter>
<parameter name="use_subtitle">
<parameter_description> whether to use the current value as the subtitle
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_easing_ease">
<description>
Computes easing with @easing for @value.

@value should generally be in the [0, 1] range.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an easing value
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a value to ease
</parameter_description>
</parameter>
</parameters>
<return> the easing for @value

</return>
</function>

<function name="adw_entry_row_add_prefix">
<description>
Adds a prefix widget to @self.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an entry row
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> a widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_entry_row_add_suffix">
<description>
Adds a suffix widget to @self.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an entry row
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> a widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_entry_row_get_activates_default">
<description>
Gets whether activating the embedded entry can activate the default widget.


</description>
<parameters>
<parameter name="self">
<parameter_description> an entry row
</parameter_description>
</parameter>
</parameters>
<return> whether to activate the default widget
</return>
</function>

<function name="adw_entry_row_get_attributes">
<description>
Gets Pango attributes applied to the text of the embedded entry.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an entry row
</parameter_description>
</parameter>
</parameters>
<return> the list of attributes

</return>
</function>

<function name="adw_entry_row_get_enable_emoji_completion">
<description>
Gets whether to suggest emoji replacements on @self.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an entry row
</parameter_description>
</parameter>
</parameters>
<return> whether or not emoji completion is enabled

</return>
</function>

<function name="adw_entry_row_get_input_hints">
<description>
Gets the additional input hints of @self.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an entry row
</parameter_description>
</parameter>
</parameters>
<return> The input hints

</return>
</function>

<function name="adw_entry_row_get_input_purpose">
<description>
Gets the input purpose of @self.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an entry row
</parameter_description>
</parameter>
</parameters>
<return> the input purpose

</return>
</function>

<function name="adw_entry_row_get_show_apply_button">
<description>
Gets whether @self can show the apply button.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an entry row
</parameter_description>
</parameter>
</parameters>
<return> whether to show the apply button

</return>
</function>

<function name="adw_entry_row_new">
<description>
Creates a new `AdwEntryRow`.

Since: 1.2

</description>
<parameters>
</parameters>
<return> the newly created `AdwEntryRow`

</return>
</function>

<function name="adw_entry_row_remove">
<description>
Removes a child from @self.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an entry row
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> the child to be removed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_entry_row_set_activates_default">
<description>
Sets whether activating the embedded entry can activate the default widget.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an entry row
</parameter_description>
</parameter>
<parameter name="activates">
<parameter_description> whether to activate the default widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_entry_row_set_attributes">
<description>
Sets Pango attributes to apply to the text of the embedded entry.

The [struct@Pango.Attribute]'s `start_index` and `end_index` must refer to
the [class@Gtk.EntryBuffer] text, i.e. without the preedit string.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an entry row
</parameter_description>
</parameter>
<parameter name="attributes">
<parameter_description> a list of attributes
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_entry_row_set_enable_emoji_completion">
<description>
Sets whether to suggest emoji replacements on @self.

Emoji replacement is done with :-delimited names, like `:heart:`.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an entry row
</parameter_description>
</parameter>
<parameter name="enable_emoji_completion">
<parameter_description> Whether emoji completion should be enabled or not
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_entry_row_set_input_hints">
<description>
Set additional input hints for @self.

Input hints allow input methods to fine-tune their behavior.

See also: [property@AdwEntryRow:input-purpose]

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an entry row
</parameter_description>
</parameter>
<parameter name="hints">
<parameter_description> the hints
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_entry_row_set_input_purpose">
<description>
Sets the input purpose of @self.

The input purpose can be used by input methods to adjust their behavior.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an entry row
</parameter_description>
</parameter>
<parameter name="purpose">
<parameter_description> the purpose
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_entry_row_set_show_apply_button">
<description>
Sets whether @self can show the apply button.

When set to `TRUE`, typing text in the entry will reveal an apply button.
Clicking it or pressing the &lt;kbd&gt;Enter&lt;/kbd&gt; key will hide the button and
emit the [signal@EntryRow::apply] signal.

This is useful if changing the entry contents can trigger an expensive
operation, e.g. network activity, to avoid triggering it after typing every
character.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> an entry row
</parameter_description>
</parameter>
<parameter name="show_apply_button">
<parameter_description> whether to show the apply button
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_enum_list_item_get_name">
<description>
Gets the enum value name.

Since: 1.0

</description>
<parameters>
</parameters>
<return> the enum value name

</return>
</function>

<function name="adw_enum_list_item_get_nick">
<description>
Gets the enum value nick.

Since: 1.0

</description>
<parameters>
</parameters>
<return> the enum value nick

</return>
</function>

<function name="adw_enum_list_item_get_value">
<description>
Gets the enum value.

Since: 1.0

</description>
<parameters>
</parameters>
<return> the enum value

</return>
</function>

<function name="adw_enum_list_model_find_position">
<description>
Finds the position of a given enum value in @self.

Since: 1.0

</description>
<parameters>
<parameter name="value">
<parameter_description> an enum value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_enum_list_model_get_enum_type">
<description>
Gets the type of the enum represented by @self.

Since: 1.0

</description>
<parameters>
</parameters>
<return> the enum type

</return>
</function>

<function name="adw_enum_list_model_new">
<description>
Creates a new `AdwEnumListModel` for @enum_type.

Since: 1.0

</description>
<parameters>
<parameter name="enum_type">
<parameter_description> the type of the enum to construct the model from
</parameter_description>
</parameter>
</parameters>
<return> the newly created `AdwEnumListModel`

</return>
</function>

<function name="adw_expander_row_add_action">
<description>
Adds an action widget to @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an expander row
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> a widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_expander_row_add_prefix">
<description>
Adds a prefix widget to @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an expander row
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> a widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_expander_row_add_row">
<description>
Adds a widget to @self.

The widget will appear in the expanding list below @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an expander row
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_expander_row_get_enable_expansion">
<description>
Gets whether the expansion of @self is enabled.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an expander row
</parameter_description>
</parameter>
</parameters>
<return> whether the expansion of @self is enabled.

</return>
</function>

<function name="adw_expander_row_get_expanded">
<description>
Gets whether @self is expanded.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an expander row
</parameter_description>
</parameter>
</parameters>
<return> whether @self is expanded

</return>
</function>

<function name="adw_expander_row_get_icon_name">
<description>
Gets the icon name for @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an expander row
</parameter_description>
</parameter>
</parameters>
<return> the icon name for @self

</return>
</function>

<function name="adw_expander_row_get_show_enable_switch">
<description>
Gets whether the switch enabling the expansion of @self is visible.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an expander row
</parameter_description>
</parameter>
</parameters>
<return> whether the switch enabling the expansion is visible

</return>
</function>

<function name="adw_expander_row_get_subtitle">
<description>
Gets the subtitle for @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an expander row
</parameter_description>
</parameter>
</parameters>
<return> the subtitle for @self

</return>
</function>

<function name="adw_expander_row_new">
<description>
Creates a new `AdwExpanderRow`.

Since: 1.0

</description>
<parameters>
</parameters>
<return> the newly created `AdwExpanderRow`

</return>
</function>

<function name="adw_expander_row_set_enable_expansion">
<description>
Sets whether the expansion of @self is enabled.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an expander row
</parameter_description>
</parameter>
<parameter name="enable_expansion">
<parameter_description> whether to enable the expansion
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_expander_row_set_expanded">
<description>
Sets whether @self is expanded.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an expander row
</parameter_description>
</parameter>
<parameter name="expanded">
<parameter_description> whether to expand the row
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_expander_row_set_icon_name">
<description>
Sets the icon name for @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an expander row
</parameter_description>
</parameter>
<parameter name="icon_name">
<parameter_description> the icon name
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_expander_row_set_show_enable_switch">
<description>
Sets whether the switch enabling the expansion of @self is visible.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an expander row
</parameter_description>
</parameter>
<parameter name="show_enable_switch">
<parameter_description> whether to show the switch enabling the expansion
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_expander_row_set_subtitle">
<description>
Sets the subtitle for @self.

The subtitle is interpreted as Pango markup unless
[property@PreferencesRow:use-markup] is set to `FALSE`.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an expander row
</parameter_description>
</parameter>
<parameter name="subtitle">
<parameter_description> the subtitle
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_flap_get_content">
<description>
Gets the content widget for @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a flap
</parameter_description>
</parameter>
</parameters>
<return> the content widget for @self

</return>
</function>

<function name="adw_flap_get_flap">
<description>
Gets the flap widget for @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a flap
</parameter_description>
</parameter>
</parameters>
<return> the flap widget for @self

</return>
</function>

<function name="adw_flap_get_flap_position">
<description>
Gets the flap position for @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a flap
</parameter_description>
</parameter>
</parameters>
<return> the flap position for @self

</return>
</function>

<function name="adw_flap_get_fold_duration">
<description>
Gets the fold transition animation duration for @self, in milliseconds.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a flap
</parameter_description>
</parameter>
</parameters>
<return> the fold transition duration

</return>
</function>

<function name="adw_flap_get_fold_policy">
<description>
Gets the fold policy for @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a flap
</parameter_description>
</parameter>
</parameters>
<return> the fold policy for @self

</return>
</function>

<function name="adw_flap_get_fold_threshold_policy">
<description>
Gets the fold threshold policy for @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a flap
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_flap_get_folded">
<description>
Gets whether @self is currently folded.

See [property@Flap:fold-policy].

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a flap
</parameter_description>
</parameter>
</parameters>
<return> `TRUE` if @self is currently folded

</return>
</function>

<function name="adw_flap_get_locked">
<description>
Gets whether @self is locked.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a flap
</parameter_description>
</parameter>
</parameters>
<return> `TRUE` if @self is locked

</return>
</function>

<function name="adw_flap_get_modal">
<description>
Gets whether @self is modal.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a flap
</parameter_description>
</parameter>
</parameters>
<return> `TRUE` if @self is modal

</return>
</function>

<function name="adw_flap_get_reveal_flap">
<description>
Gets whether the flap widget is revealed for @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a flap
</parameter_description>
</parameter>
</parameters>
<return> `TRUE` if the flap widget is revealed

</return>
</function>

<function name="adw_flap_get_reveal_params">
<description>
Gets the reveal animation spring parameters for @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a flap
</parameter_description>
</parameter>
</parameters>
<return> the reveal animation parameters

</return>
</function>

<function name="adw_flap_get_reveal_progress">
<description>
Gets the current reveal progress for @self.

0 means fully hidden, 1 means fully revealed.

See [property@Flap:reveal-flap].

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a flap
</parameter_description>
</parameter>
</parameters>
<return> the current reveal progress for @self

</return>
</function>

<function name="adw_flap_get_separator">
<description>
Gets the separator widget for @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a flap
</parameter_description>
</parameter>
</parameters>
<return> the separator widget for @self

</return>
</function>

<function name="adw_flap_get_swipe_to_close">
<description>
Gets whether @self can be closed with a swipe gesture.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a flap
</parameter_description>
</parameter>
</parameters>
<return> `TRUE` if @self can be closed with a swipe gesture

</return>
</function>

<function name="adw_flap_get_swipe_to_open">
<description>
Gets whether @self can be opened with a swipe gesture.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a flap
</parameter_description>
</parameter>
</parameters>
<return> `TRUE` if @self can be opened with a swipe gesture

</return>
</function>

<function name="adw_flap_get_transition_type">
<description>
Gets the type of animation used for reveal and fold transitions in @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a flap
</parameter_description>
</parameter>
</parameters>
<return> the current transition type of @self

</return>
</function>

<function name="adw_flap_new">
<description>
Creates a new `AdwFlap`.

Since: 1.0

</description>
<parameters>
</parameters>
<return> the newly created `AdwFlap`

</return>
</function>

<function name="adw_flap_set_content">
<description>
Sets the content widget for @self.

It's always displayed when unfolded, and partially visible when folded.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a flap
</parameter_description>
</parameter>
<parameter name="content">
<parameter_description> the content widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_flap_set_flap">
<description>
Sets the flap widget for @self.

It's only visible when [property@Flap:reveal-progress] is greater than 0.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a flap
</parameter_description>
</parameter>
<parameter name="flap">
<parameter_description> the flap widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_flap_set_flap_position">
<description>
Sets the flap position for @self.

If it's set to `GTK_PACK_START`, the flap is displayed before the content,
if `GTK_PACK_END`, it's displayed after the content.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a flap
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the new value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_flap_set_fold_duration">
<description>
Sets the fold transition animation duration for @self, in milliseconds.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a flap
</parameter_description>
</parameter>
<parameter name="duration">
<parameter_description> the new duration, in milliseconds
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_flap_set_fold_policy">
<description>
Sets the fold policy for @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a flap
</parameter_description>
</parameter>
<parameter name="policy">
<parameter_description> the fold policy
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_flap_set_fold_threshold_policy">
<description>
Sets the fold threshold policy for @self.

If set to `ADW_FOLD_THRESHOLD_POLICY_MINIMUM`, flap will only fold when the
children cannot fit anymore. With `ADW_FOLD_THRESHOLD_POLICY_NATURAL`, it
will fold as soon as children don't get their natural size.

This can be useful if you have a long ellipsizing label and want to let it
ellipsize instead of immediately folding.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a flap
</parameter_description>
</parameter>
<parameter name="policy">
<parameter_description> the policy to use
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_flap_set_locked">
<description>
Sets whether @self is locked.

If `FALSE`, folding when the flap is revealed automatically closes it, and
unfolding it when the flap is not revealed opens it. If `TRUE`,
[property@Flap:reveal-flap] value never changes on its own.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a flap
</parameter_description>
</parameter>
<parameter name="locked">
<parameter_description> the new value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_flap_set_modal">
<description>
Sets whether @self is modal.

If `TRUE`, clicking the content widget while flap is revealed, as well as
pressing the &lt;kbd&gt;Esc&lt;/kbd&gt; key, will close the flap. If `FALSE`, clicks are
passed through to the content widget.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a flap
</parameter_description>
</parameter>
<parameter name="modal">
<parameter_description> whether @self is modal
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_flap_set_reveal_flap">
<description>
Sets whether the flap widget is revealed for @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a flap
</parameter_description>
</parameter>
<parameter name="reveal_flap">
<parameter_description> whether to reveal the flap widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_flap_set_reveal_params">
<description>
Sets the reveal animation spring parameters for @self.

The default value is equivalent to:

```c
adw_spring_params_new (1, 0.5, 500)
```

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a flap
</parameter_description>
</parameter>
<parameter name="params">
<parameter_description> the new parameters
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_flap_set_separator">
<description>
Sets the separator widget for @self.

It's displayed between content and flap when there's no shadow to display.
When exactly it's visible depends on the [property@Flap:transition-type]
value.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a flap
</parameter_description>
</parameter>
<parameter name="separator">
<parameter_description> the separator widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_flap_set_swipe_to_close">
<description>
Sets whether @self can be closed with a swipe gesture.

The area that can be swiped depends on the [property@Flap:transition-type]
value.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a flap
</parameter_description>
</parameter>
<parameter name="swipe_to_close">
<parameter_description> whether @self can be closed with a swipe gesture
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_flap_set_swipe_to_open">
<description>
Sets whether @self can be opened with a swipe gesture.

The area that can be swiped depends on the [property@Flap:transition-type]
value.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a flap
</parameter_description>
</parameter>
<parameter name="swipe_to_open">
<parameter_description> whether @self can be opened with a swipe gesture
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_flap_set_transition_type">
<description>
Sets the type of animation used for reveal and fold transitions in @self.

[property@Flap:flap] is transparent by default, which means the content will
be seen through it with `ADW_FLAP_TRANSITION_TYPE_OVER` transitions; add the
[`.background`](style-classes.html#background) style class to it if this is
unwanted.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a flap
</parameter_description>
</parameter>
<parameter name="transition_type">
<parameter_description> the new transition type
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_get_enable_animations">
<description>
Checks whether animations are enabled for @widget.

This should be used when implementing an animated widget to know whether to
animate it or not.

Since: 1.0

</description>
<parameters>
<parameter name="widget">
<parameter_description> a `GtkWidget`
</parameter_description>
</parameter>
</parameters>
<return> whether animations are enabled for @widget

</return>
</function>

<function name="adw_get_major_version">
<description>
Returns the major version number of the Adwaita library.

For example, in libadwaita version 1.2.3 this is 1.

This function is in the library, so it represents the libadwaita library your
code is running against. Contrast with the [const@MAJOR_VERSION] constant,
which represents the major version of the libadwaita headers you have
included when compiling your code.


</description>
<parameters>
</parameters>
<return> the major version number of the Adwaita library
</return>
</function>

<function name="adw_get_micro_version">
<description>
Returns the micro version number of the Adwaita library.

For example, in libadwaita version 1.2.3 this is 3.

This function is in the library, so it represents the libadwaita library your
code is running against. Contrast with the [const@MAJOR_VERSION] constant,
which represents the micro version of the libadwaita headers you have
included when compiling your code.


</description>
<parameters>
</parameters>
<return> the micro version number of the Adwaita library
</return>
</function>

<function name="adw_get_minor_version">
<description>
Returns the minor version number of the Adwaita library.

For example, in libadwaita version 1.2.3 this is 2.

This function is in the library, so it represents the libadwaita library your
code is running against. Contrast with the [const@MAJOR_VERSION] constant,
which represents the minor version of the libadwaita headers you have
included when compiling your code.


</description>
<parameters>
</parameters>
<return> the minor version number of the Adwaita library
</return>
</function>

<function name="adw_header_bar_get_centering_policy">
<description>
Gets the policy for aligning the center widget.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a header bar
</parameter_description>
</parameter>
</parameters>
<return> the centering policy

</return>
</function>

<function name="adw_header_bar_get_decoration_layout">
<description>
Gets the decoration layout for @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a header bar
</parameter_description>
</parameter>
</parameters>
<return> the decoration layout

</return>
</function>

<function name="adw_header_bar_get_show_end_title_buttons">
<description>
Gets whether to show title buttons at the end of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a header bar
</parameter_description>
</parameter>
</parameters>
<return> `TRUE` if title buttons at the end are shown

</return>
</function>

<function name="adw_header_bar_get_show_start_title_buttons">
<description>
Gets whether to show title buttons at the start of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a header bar
</parameter_description>
</parameter>
</parameters>
<return> `TRUE` if title buttons at the start are shown

</return>
</function>

<function name="adw_header_bar_get_title_widget">
<description>
Gets the title widget widget of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a header bar
</parameter_description>
</parameter>
</parameters>
<return> the title widget

</return>
</function>

<function name="adw_header_bar_new">
<description>
Creates a new `AdwHeaderBar`.

Since: 1.0

</description>
<parameters>
</parameters>
<return> the newly created `AdwHeaderBar`.

</return>
</function>

<function name="adw_header_bar_pack_end">
<description>
Adds @child to @self, packed with reference to the end of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a header bar
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the widget to be added to @self
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_header_bar_pack_start">
<description>
Adds @child to @self, packed with reference to the start of the @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a header bar
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the widget to be added to @self
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_header_bar_remove">
<description>
Removes a child from @self.

The child must have been added with [method@HeaderBar.pack_start],
[method@HeaderBar.pack_end] or [property@HeaderBar:title-widget].

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a header bar
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the child to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_header_bar_set_centering_policy">
<description>
Sets the policy for aligning the center widget.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a header bar
</parameter_description>
</parameter>
<parameter name="centering_policy">
<parameter_description> the centering policy
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_header_bar_set_decoration_layout">
<description>
Sets the decoration layout for @self.

If this property is not set, the
[property@Gtk.Settings:gtk-decoration-layout] setting is used.

The format of the string is button names, separated by commas. A colon
separates the buttons that should appear at the start from those at the end.
Recognized button names are minimize, maximize, close and icon (the window
icon).

For example, “icon:minimize,maximize,close” specifies an icon at the start,
and minimize, maximize and close buttons at the end.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a header bar
</parameter_description>
</parameter>
<parameter name="layout">
<parameter_description> a decoration layout
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_header_bar_set_show_end_title_buttons">
<description>
Sets whether to show title buttons at the end of @self.

See [property@HeaderBar:show-start-title-buttons] for the other side.

Which buttons are actually shown and where is determined by the
[property@HeaderBar:decoration-layout] property, and by the state of the
window (e.g. a close button will not be shown if the window can't be closed).

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a header bar
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> `TRUE` to show standard title buttons
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_header_bar_set_show_start_title_buttons">
<description>
Sets whether to show title buttons at the start of @self.

See [property@HeaderBar:show-end-title-buttons] for the other side.

Which buttons are actually shown and where is determined by the
[property@HeaderBar:decoration-layout] property, and by the state of the
window (e.g. a close button will not be shown if the window can't be closed).

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a header bar
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> `TRUE` to show standard title buttons
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_header_bar_set_title_widget">
<description>
Sets the title widget for @self.

When set to `NULL`, the header bar will display the title of the window it
is contained in.

To use a different title, use [class@WindowTitle]:

```xml
&lt;object class=&quot;AdwHeaderBar&quot;&gt;
&lt;property name=&quot;title-widget&quot;&gt;
&lt;object class=&quot;AdwWindowTitle&quot;&gt;
&lt;property name=&quot;title&quot; translatable=&quot;yes&quot;&gt;Title&lt;/property&gt;
&lt;/object&gt;
&lt;/property&gt;
&lt;/object&gt;
```

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a header bar
</parameter_description>
</parameter>
<parameter name="title_widget">
<parameter_description> a widget to use for a title
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_indicator_bin_get_child">
<description>
Gets the child widget of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an indicator bin
</parameter_description>
</parameter>
</parameters>
<return> the child widget of @self

</return>
</function>

<function name="adw_indicator_bin_new">
<description>
Creates a new `AdwIndicatorBin`.

Since: 1.0

</description>
<parameters>
</parameters>
<return> the newly created `AdwIndicatorBin`

</return>
</function>

<function name="adw_indicator_bin_set_child">
<description>
Sets the child widget of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> an indicator bin
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the child widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_init">
<description>
Initializes Libadwaita.

This function can be used instead of [func@Gtk.init] as it initializes GTK
implicitly.

There's no need to call this function if you're using [class@Application].

If Libadwaita has already been initialized, the function will simply return.

This makes sure translations, types, themes, and icons for the Adwaita
library are set up properly.

Since: 1.0

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="adw_is_initialized">
<description>
Use this function to check if libadwaita has been initialized with
[func@init].


</description>
<parameters>
</parameters>
<return> the initialization status
</return>
</function>

<function name="adw_leaflet_append">
<description>
Adds a child to @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a leaflet
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the widget to add
</parameter_description>
</parameter>
</parameters>
<return> the [class@LeafletPage] for @child

</return>
</function>

<function name="adw_leaflet_get_adjacent_child">
<description>
Finds the previous or next navigatable child.

This will be the same child [method@Leaflet.navigate] or swipe gestures will
navigate to.

If there's no child to navigate to, `NULL` will be returned instead.

See [property@LeafletPage:navigatable].

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a leaflet
</parameter_description>
</parameter>
<parameter name="direction">
<parameter_description> the direction
</parameter_description>
</parameter>
</parameters>
<return> the previous or next child

</return>
</function>

<function name="adw_leaflet_get_can_navigate_back">
<description>
Gets whether gestures and shortcuts for navigating backward are enabled.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a leaflet
</parameter_description>
</parameter>
</parameters>
<return> Whether gestures and shortcuts are enabled.

</return>
</function>

<function name="adw_leaflet_get_can_navigate_forward">
<description>
Gets whether gestures and shortcuts for navigating forward are enabled.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a leaflet
</parameter_description>
</parameter>
</parameters>
<return> Whether gestures and shortcuts are enabled.

</return>
</function>

<function name="adw_leaflet_get_can_unfold">
<description>
Gets whether @self can unfold.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a leaflet
</parameter_description>
</parameter>
</parameters>
<return> whether @self can unfold

</return>
</function>

<function name="adw_leaflet_get_child_by_name">
<description>
Finds the child of @self with @name.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a leaflet
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the child to find
</parameter_description>
</parameter>
</parameters>
<return> the requested child of @self

</return>
</function>

<function name="adw_leaflet_get_child_transition_params">
<description>
Gets the child transition spring parameters for @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a leaflet
</parameter_description>
</parameter>
</parameters>
<return> the child transition parameters

</return>
</function>

<function name="adw_leaflet_get_child_transition_running">
<description>
Gets whether a child transition is currently running for @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a leaflet
</parameter_description>
</parameter>
</parameters>
<return> whether a transition is currently running

</return>
</function>

<function name="adw_leaflet_get_fold_threshold_policy">
<description>
Gets the fold threshold policy for @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a leaflet
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_leaflet_get_folded">
<description>
Gets whether @self is folded.

The leaflet will be folded if the size allocated to it is smaller than the
sum of the minimum or natural sizes of the children (see
[property@Leaflet:fold-threshold-policy]), it will be unfolded otherwise.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a leaflet
</parameter_description>
</parameter>
</parameters>
<return> whether @self is folded.

</return>
</function>

<function name="adw_leaflet_get_homogeneous">
<description>
Gets whether @self is homogeneous.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a leaflet
</parameter_description>
</parameter>
</parameters>
<return> whether @self is homogeneous

</return>
</function>

<function name="adw_leaflet_get_mode_transition_duration">
<description>
Gets the mode transition animation duration for @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a leaflet
</parameter_description>
</parameter>
</parameters>
<return> the mode transition duration, in milliseconds.

</return>
</function>

<function name="adw_leaflet_get_page">
<description>
Returns the [class@LeafletPage] object for @child.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a leaflet
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a child of @self
</parameter_description>
</parameter>
</parameters>
<return> the page object for @child

</return>
</function>

<function name="adw_leaflet_get_pages">
<description>
Returns a [iface@Gio.ListModel] that contains the pages of the leaflet.

This can be used to keep an up-to-date view. The model also implements
[iface@Gtk.SelectionModel] and can be used to track and change the visible
page.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a leaflet
</parameter_description>
</parameter>
</parameters>
<return> a `GtkSelectionModel` for the leaflet's children

</return>
</function>

<function name="adw_leaflet_get_transition_type">
<description>
Gets the type of animation used for transitions between modes and children.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a leaflet
</parameter_description>
</parameter>
</parameters>
<return> the current transition type of @self

</return>
</function>

<function name="adw_leaflet_get_visible_child">
<description>
Gets the widget currently visible when the leaflet is folded.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a leaflet
</parameter_description>
</parameter>
</parameters>
<return> the visible child

</return>
</function>

<function name="adw_leaflet_get_visible_child_name">
<description>
Gets the name of the currently visible child widget.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a leaflet
</parameter_description>
</parameter>
</parameters>
<return> the name of the visible child

</return>
</function>

<function name="adw_leaflet_insert_child_after">
<description>
Inserts @child in the position after @sibling in the list of children.

If @sibling is `NULL`, inserts @child at the first position.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a leaflet
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the widget to insert
</parameter_description>
</parameter>
<parameter name="sibling">
<parameter_description> the sibling after which to insert @child
</parameter_description>
</parameter>
</parameters>
<return> the [class@LeafletPage] for @child

</return>
</function>

<function name="adw_leaflet_navigate">
<description>
Navigates to the previous or next child.

The child must have the [property@LeafletPage:navigatable] property set to
`TRUE`, otherwise it will be skipped.

This will be the same child as returned by
[method@Leaflet.get_adjacent_child] or navigated to via swipe gestures.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a leaflet
</parameter_description>
</parameter>
<parameter name="direction">
<parameter_description> the direction
</parameter_description>
</parameter>
</parameters>
<return> whether the visible child was changed

</return>
</function>

<function name="adw_leaflet_new">
<description>
Creates a new `AdwLeaflet`.

Since: 1.0

</description>
<parameters>
</parameters>
<return> the new created `AdwLeaflet`

</return>
</function>

<function name="adw_leaflet_page_get_child">
<description>
Gets the leaflet child to which @self belongs.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a leaflet page
</parameter_description>
</parameter>
</parameters>
<return> the child to which @self belongs

</return>
</function>

<function name="adw_leaflet_page_get_name">
<description>
Gets the name of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a leaflet page
</parameter_description>
</parameter>
</parameters>
<return> the name of @self.

</return>
</function>

<function name="adw_leaflet_page_get_navigatable">
<description>
Gets whether the child can be navigated to when folded.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a leaflet page
</parameter_description>
</parameter>
</parameters>
<return> whether @self can be navigated to when folded

</return>
</function>

<function name="adw_leaflet_page_set_name">
<description>
Sets the name of the @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a leaflet page
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the new value to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_leaflet_page_set_navigatable">
<description>
Sets whether @self can be navigated to when folded.

If `FALSE`, the child will be ignored by [method@Leaflet.get_adjacent_child],
[method@Leaflet.navigate], and swipe gestures.

This can be used used to prevent switching to widgets like separators.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a leaflet page
</parameter_description>
</parameter>
<parameter name="navigatable">
<parameter_description> whether @self can be navigated to when folded
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_leaflet_prepend">
<description>
Inserts @child at the first position in @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a leaflet
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the widget to prepend
</parameter_description>
</parameter>
</parameters>
<return> the [class@LeafletPage] for @child

</return>
</function>

<function name="adw_leaflet_remove">
<description>
Removes a child widget from @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a leaflet
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the child to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_leaflet_reorder_child_after">
<description>
Moves @child to the position after @sibling in the list of children.

If @sibling is `NULL`, moves @child to the first position.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a leaflet
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the widget to move, must be a child of @self
</parameter_description>
</parameter>
<parameter name="sibling">
<parameter_description> the sibling to move @child after
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_leaflet_set_can_navigate_back">
<description>
Sets whether gestures and shortcuts for navigating backward are enabled.

The supported gestures are:

- One-finger swipe on touchscreens
- Horizontal scrolling on touchpads (usually two-finger swipe)
- Back/forward mouse buttons

The keyboard back/forward keys are also supported, as well as the
&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;←&lt;/kbd&gt; shortcut for horizontal orientation, or
&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;↑&lt;/kbd&gt; for vertical orientation.

If the orientation is horizontal, for right-to-left locales, gestures and
shortcuts are reversed.

Only children that have [property@LeafletPage:navigatable] set to `TRUE` can
be navigated to.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a leaflet
</parameter_description>
</parameter>
<parameter name="can_navigate_back">
<parameter_description> the new value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_leaflet_set_can_navigate_forward">
<description>
Sets whether gestures and shortcuts for navigating forward are enabled.

The supported gestures are:

- One-finger swipe on touchscreens
- Horizontal scrolling on touchpads (usually two-finger swipe)
- Back/forward mouse buttons

The keyboard back/forward keys are also supported, as well as the
&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;→&lt;/kbd&gt; shortcut for horizontal orientation, or
&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;↓&lt;/kbd&gt; for vertical orientation.

If the orientation is horizontal, for right-to-left locales, gestures and
shortcuts are reversed.

Only children that have [property@LeafletPage:navigatable] set to `TRUE` can
be navigated to.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a leaflet
</parameter_description>
</parameter>
<parameter name="can_navigate_forward">
<parameter_description> the new value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_leaflet_set_can_unfold">
<description>
Sets whether @self can unfold.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a leaflet
</parameter_description>
</parameter>
<parameter name="can_unfold">
<parameter_description> whether @self can unfold
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_leaflet_set_child_transition_params">
<description>
Sets the child transition spring parameters for @self.

The default value is equivalent to:

```c
adw_spring_params_new (1, 0.5, 500)
```

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a leaflet
</parameter_description>
</parameter>
<parameter name="params">
<parameter_description> the new parameters
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_leaflet_set_fold_threshold_policy">
<description>
Sets the fold threshold policy for @self.

If set to `ADW_FOLD_THRESHOLD_POLICY_MINIMUM`, it will only fold when the
children cannot fit anymore. With `ADW_FOLD_THRESHOLD_POLICY_NATURAL`, it
will fold as soon as children don't get their natural size.

This can be useful if you have a long ellipsizing label and want to let it
ellipsize instead of immediately folding.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a leaflet
</parameter_description>
</parameter>
<parameter name="policy">
<parameter_description> the policy to use
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_leaflet_set_homogeneous">
<description>
Sets @self to be homogeneous or not.

If set to `FALSE`, different children can have different size along the
opposite orientation.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a leaflet
</parameter_description>
</parameter>
<parameter name="homogeneous">
<parameter_description> whether to make @self homogeneous
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_leaflet_set_mode_transition_duration">
<description>
Sets the mode transition animation duration for @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a leaflet
</parameter_description>
</parameter>
<parameter name="duration">
<parameter_description> the new duration, in milliseconds
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_leaflet_set_transition_type">
<description>
Sets the type of animation used for transitions between modes and children.

The transition type can be changed without problems at runtime, so it is
possible to change the animation based on the mode or child that is about to
become current.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a leaflet
</parameter_description>
</parameter>
<parameter name="transition">
<parameter_description> the new transition type
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_leaflet_set_visible_child">
<description>
Sets the widget currently visible when the leaflet is folded.

The transition is determined by [property@Leaflet:transition-type] and
[property@Leaflet:child-transition-params]. The transition can be cancelled
by the user, in which case visible child will change back to the previously
visible child.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a leaflet
</parameter_description>
</parameter>
<parameter name="visible_child">
<parameter_description> the new child
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_leaflet_set_visible_child_name">
<description>
Makes the child with the name @name visible.

See [property@Leaflet:visible-child].

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a leaflet
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of a child
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_lerp">
<description>
Computes the linear interpolation between @a and @b for @t.

Since: 1.0

</description>
<parameters>
<parameter name="a">
<parameter_description> the start
</parameter_description>
</parameter>
<parameter name="b">
<parameter_description> the end
</parameter_description>
</parameter>
<parameter name="t">
<parameter_description> the interpolation rate
</parameter_description>
</parameter>
</parameters>
<return> the computed value

</return>
</function>

<function name="adw_message_dialog_add_response">
<description>
Adds a response with @id and @label to @self.

Responses are represented as buttons in the dialog.

Response ID must be unique. It will be used in
[signal@MessageDialog::response] to tell which response had been activated,
as well as to inspect and modify the response later.

An embedded underline in @label indicates a mnemonic.

[method@MessageDialog.set_response_label] can be used to change the response
label after it had been added.

[method@MessageDialog.set_response_enabled] and
[method@MessageDialog.set_response_appearance] can be used to customize the
responses further.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a message dialog
</parameter_description>
</parameter>
<parameter name="id">
<parameter_description> the response ID
</parameter_description>
</parameter>
<parameter name="label">
<parameter_description> the response label
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_message_dialog_add_responses">
<description>
Adds multiple responses to @self.

This is the same as calling [method@MessageDialog.add_response] repeatedly.
The variable argument list should be `NULL`-terminated list of response IDs
and labels.

Example:

```c
adw_message_dialog_add_responses (dialog,
&quot;cancel&quot;,  _(&quot;_Cancel&quot;),
&quot;discard&quot;, _(&quot;_Discard&quot;),
&quot;save&quot;,    _(&quot;_Save&quot;),
NULL);
```

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a message dialog
</parameter_description>
</parameter>
<parameter name="first_id">
<parameter_description> response id
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> label for first response, then more id-label pairs
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_message_dialog_format_body">
<description>
Sets the formatted body text of @self.

See [property@MessageDialog:body].

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a message dialog
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the formatted string for the body text
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> the parameters to insert into @format
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_message_dialog_format_body_markup">
<description>
Sets the formatted body text of @self with Pango markup.

The @format is assumed to contain Pango markup.

Special XML characters in the `printf()` arguments passed to this function
will  automatically be escaped as necessary, see
[func@GLib.markup_printf_escaped].

See [property@MessageDialog:body].

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a message dialog
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the formatted string for the body text with Pango markup
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> the parameters to insert into @format
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_message_dialog_format_heading">
<description>
Sets the formatted heading of @self.

See [property@MessageDialog:heading].

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a message dialog
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the formatted string for the heading
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> the parameters to insert into @format
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_message_dialog_format_heading_markup">
<description>
Sets the formatted heading of @self with Pango markup.

The @format is assumed to contain Pango markup.

Special XML characters in the `printf()` arguments passed to this function
will automatically be escaped as necessary, see
[func@GLib.markup_printf_escaped].

See [property@MessageDialog:heading].

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a message dialog
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the formatted string for the heading with Pango markup
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> the parameters to insert into @format
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_message_dialog_get_body">
<description>
Gets the body text of @self.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a message dialog
</parameter_description>
</parameter>
</parameters>
<return> the body of @self.

</return>
</function>

<function name="adw_message_dialog_get_body_use_markup">
<description>
Gets whether the body text of @self includes Pango markup.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a message dialog
</parameter_description>
</parameter>
</parameters>
<return> whether @self uses markup for body text

</return>
</function>

<function name="adw_message_dialog_get_close_response">
<description>
Gets the ID of the close response of @self.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a message dialog
</parameter_description>
</parameter>
</parameters>
<return> the close response ID

</return>
</function>

<function name="adw_message_dialog_get_default_response">
<description>
Gets the ID of the default response of @self.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a message dialog
</parameter_description>
</parameter>
</parameters>
<return> the default response ID

</return>
</function>

<function name="adw_message_dialog_get_extra_child">
<description>
Gets the child widget of @self.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a message dialog
</parameter_description>
</parameter>
</parameters>
<return> the child widget of @self.

</return>
</function>

<function name="adw_message_dialog_get_heading">
<description>
Gets the heading of @self.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a message dialog
</parameter_description>
</parameter>
</parameters>
<return> the heading of @self.

</return>
</function>

<function name="adw_message_dialog_get_heading_use_markup">
<description>
Gets whether the heading of @self includes Pango markup.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a message dialog
</parameter_description>
</parameter>
</parameters>
<return> whether @self uses markup for heading

</return>
</function>

<function name="adw_message_dialog_get_response_appearance">
<description>
Gets the appearance of @response.

See [method@MessageDialog.set_response_appearance].

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a message dialog
</parameter_description>
</parameter>
<parameter name="response">
<parameter_description> a response ID
</parameter_description>
</parameter>
</parameters>
<return> the appearance of @response

</return>
</function>

<function name="adw_message_dialog_get_response_enabled">
<description>
Gets whether @response is enabled.

See [method@MessageDialog.set_response_enabled].

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a message dialog
</parameter_description>
</parameter>
<parameter name="response">
<parameter_description> a response ID
</parameter_description>
</parameter>
</parameters>
<return> whether @response is enabled

</return>
</function>

<function name="adw_message_dialog_get_response_label">
<description>
Gets the label of @response.

See [method@MessageDialog.set_response_label].

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a message dialog
</parameter_description>
</parameter>
<parameter name="response">
<parameter_description> a response ID
</parameter_description>
</parameter>
</parameters>
<return> the label of @response

</return>
</function>

<function name="adw_message_dialog_has_response">
<description>
Gets whether @self has a response with the ID @response.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a message dialog
</parameter_description>
</parameter>
<parameter name="response">
<parameter_description> response ID
</parameter_description>
</parameter>
</parameters>
<return> whether @self has a response with the ID @response.

</return>
</function>

<function name="adw_message_dialog_new">
<description>
Creates a new `AdwMessageDialog`.

@heading and @body can be set to `NULL`. This can be useful if they need to
be formatted or use markup. In that case, set them to `NULL` and call
[method@MessageDialog.format_body] or similar methods afterwards:

```c
GtkWidget *dialog;

dialog = adw_message_dialog_new (parent, _(&quot;Replace File?&quot;), NULL);
adw_message_dialog_format_body (ADW_MESSAGE_DIALOG (dialog),
_(&quot;A file named “%s” already exists.  Do you want to replace it?&quot;),
filename);
```

Since: 1.2

</description>
<parameters>
<parameter name="parent">
<parameter_description> transient parent
</parameter_description>
</parameter>
<parameter name="heading">
<parameter_description> the heading
</parameter_description>
</parameter>
<parameter name="body">
<parameter_description> the body text
</parameter_description>
</parameter>
</parameters>
<return> the newly created `AdwMessageDialog`

</return>
</function>

<function name="adw_message_dialog_response">
<description>
Emits the [signal@MessageDialog::response] signal with the given response ID.

Used to indicate that the user has responded to the dialog in some way.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a message dialog
</parameter_description>
</parameter>
<parameter name="response">
<parameter_description> response ID
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_message_dialog_set_body">
<description>
Sets the body text of @self.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a message dialog
</parameter_description>
</parameter>
<parameter name="body">
<parameter_description> the body of @self
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_message_dialog_set_body_use_markup">
<description>
Sets whether the body text of @self includes Pango markup.

See [func@Pango.parse_markup].

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a message dialog
</parameter_description>
</parameter>
<parameter name="use_markup">
<parameter_description> whether to use markup for body text
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_message_dialog_set_close_response">
<description>
Sets the ID of the close response of @self.

It will be passed to [signal@MessageDialog::response] if the window is
closed by pressing &lt;kbd&gt;Escape&lt;/kbd&gt; or with a system action.

It doesn't have to correspond to any of the responses in the dialog.

The default close response is `close`.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a message dialog
</parameter_description>
</parameter>
<parameter name="response">
<parameter_description> the close response ID
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_message_dialog_set_default_response">
<description>
Sets the ID of the default response of @self.

If set, pressing &lt;kbd&gt;Enter&lt;/kbd&gt; will activate the corresponding button.

If set to `NULL` or to a non-existent response ID, pressing &lt;kbd&gt;Enter&lt;/kbd&gt;
will do nothing.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a message dialog
</parameter_description>
</parameter>
<parameter name="response">
<parameter_description> the default response ID
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_message_dialog_set_extra_child">
<description>
Sets the child widget of @self.

The child widget is displayed below the heading and body.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a message dialog
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the child widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_message_dialog_set_heading">
<description>
Sets the heading of @self.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a message dialog
</parameter_description>
</parameter>
<parameter name="heading">
<parameter_description> the heading of @self
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_message_dialog_set_heading_use_markup">
<description>
Sets whether the heading of @self includes Pango markup.

See [func@Pango.parse_markup].

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a message dialog
</parameter_description>
</parameter>
<parameter name="use_markup">
<parameter_description> whether to use markup for heading
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_message_dialog_set_response_appearance">
<description>
Sets the appearance for @response.

&lt;picture&gt;
&lt;source srcset=&quot;message-dialog-appearance-dark.png&quot; media=&quot;(prefers-color-scheme: dark)&quot;&gt;
&lt;img src=&quot;message-dialog-appearance.png&quot; alt=&quot;message-dialog-appearance&quot;&gt;
&lt;/picture&gt;

Use `ADW_RESPONSE_SUGGESTED` to mark important responses such as the
affirmative action, like the Save button in the example.

Use `ADW_RESPONSE_DESTRUCTIVE` to draw attention to the potentially damaging
consequences of using @response. This appearance acts as a warning to the
user. The Discard button in the example is using this appearance.

The default appearance is `ADW_RESPONSE_DEFAULT`.

Negative responses like Cancel or Close should use the default appearance.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a message dialog
</parameter_description>
</parameter>
<parameter name="response">
<parameter_description> a response ID
</parameter_description>
</parameter>
<parameter name="appearance">
<parameter_description> appearance for @response
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_message_dialog_set_response_enabled">
<description>
Sets whether @response is enabled.

If @response is not enabled, the corresponding button will have
[property@Gtk.Widget:sensitive] set to `FALSE` and it can't be activated as
a default response.

@response can still be used as [property@MessageDialog:close-response] while
it's not enabled.

Responses are enabled by default.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a message dialog
</parameter_description>
</parameter>
<parameter name="response">
<parameter_description> a response ID
</parameter_description>
</parameter>
<parameter name="enabled">
<parameter_description> whether to enable @response
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_message_dialog_set_response_label">
<description>
Sets the label of @response to @label.

Labels are displayed on the dialog buttons. An embedded underline in @label
indicates a mnemonic.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a message dialog
</parameter_description>
</parameter>
<parameter name="response">
<parameter_description> a response ID
</parameter_description>
</parameter>
<parameter name="label">
<parameter_description> the label of @response
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_password_entry_row_new">
<description>
Creates a new `AdwPasswordEntryRow`.

Since: 1.2

</description>
<parameters>
</parameters>
<return> the newly created `AdwPasswordEntryRow`

</return>
</function>

<function name="adw_preferences_group_add">
<description>
Adds a child to @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a preferences group
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the widget to add
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_preferences_group_get_description">
<description>
Gets the description of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a preferences group
</parameter_description>
</parameter>
</parameters>
<return> the description of @self

</return>
</function>

<function name="adw_preferences_group_get_header_suffix">
<description>
Gets the suffix for @self's header.

Since: 1.1

</description>
<parameters>
<parameter name="self">
<parameter_description> a `AdwPreferencesGroup`
</parameter_description>
</parameter>
</parameters>
<return> the suffix for @self's header.

</return>
</function>

<function name="adw_preferences_group_get_rows">
<description>
Gets a [iface@Gio.ListModel] that contains the rows of the group.

This can be used to keep an up-to-date view.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a preferences group
</parameter_description>
</parameter>
</parameters>
<return> a list model for the group's rows

</return>
</function>

<function name="adw_preferences_group_get_title">
<description>
Gets the title of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a preferences group
</parameter_description>
</parameter>
</parameters>
<return> the title of @self

</return>
</function>

<function name="adw_preferences_group_new">
<description>
Creates a new `AdwPreferencesGroup`.

Since: 1.0

</description>
<parameters>
</parameters>
<return> the newly created `AdwPreferencesGroup`

</return>
</function>

<function name="adw_preferences_group_remove">
<description>
Removes a child from @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a preferences group
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the child to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_preferences_group_set_description">
<description>
Sets the description for @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a preferences group
</parameter_description>
</parameter>
<parameter name="description">
<parameter_description> the description
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_preferences_group_set_header_suffix">
<description>
Sets the suffix for @self's header.

Displayed above the list, next to the title and description.

Suffixes are commonly used to show a button or a spinner for the whole group.

Since: 1.1

</description>
<parameters>
<parameter name="self">
<parameter_description> a `AdwPreferencesGroup`
</parameter_description>
</parameter>
<parameter name="suffix">
<parameter_description> the suffix to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_preferences_group_set_title">
<description>
Sets the title for @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a preferences group
</parameter_description>
</parameter>
<parameter name="title">
<parameter_description> the title
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_preferences_page_add">
<description>
Adds a preferences group to @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a preferences page
</parameter_description>
</parameter>
<parameter name="group">
<parameter_description> the group to add
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_preferences_page_get_icon_name">
<description>
Gets the icon name for @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a preferences page
</parameter_description>
</parameter>
</parameters>
<return> the icon name for @self

</return>
</function>

<function name="adw_preferences_page_get_name">
<description>
Gets the name of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a preferences page
</parameter_description>
</parameter>
</parameters>
<return> the name of @self

</return>
</function>

<function name="adw_preferences_page_get_rows">
<description>
Gets a [iface@Gio.ListModel] that contains the rows of the page.

This can be used to keep an up-to-date view.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a preferences page
</parameter_description>
</parameter>
</parameters>
<return> a list model for the page's rows

</return>
</function>

<function name="adw_preferences_page_get_title">
<description>
Gets the title of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a preferences page
</parameter_description>
</parameter>
</parameters>
<return> the title of @self.

</return>
</function>

<function name="adw_preferences_page_get_use_underline">
<description>
Gets whether an embedded underline in the title indicates a mnemonic.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a preferences page
</parameter_description>
</parameter>
</parameters>
<return> whether an embedded underline in the title indicates a mnemonic

</return>
</function>

<function name="adw_preferences_page_new">
<description>
Creates a new `AdwPreferencesPage`.

Since: 1.0

</description>
<parameters>
</parameters>
<return> the newly created `AdwPreferencesPage`

</return>
</function>

<function name="adw_preferences_page_remove">
<description>
Removes a group from @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a preferences page
</parameter_description>
</parameter>
<parameter name="group">
<parameter_description> the group to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_preferences_page_set_icon_name">
<description>
Sets the icon name for @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a preferences page
</parameter_description>
</parameter>
<parameter name="icon_name">
<parameter_description> the icon name
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_preferences_page_set_name">
<description>
Sets the name of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a preferences page
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_preferences_page_set_title">
<description>
Sets the title of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a preferences page
</parameter_description>
</parameter>
<parameter name="title">
<parameter_description> the title
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_preferences_page_set_use_underline">
<description>
Sets whether an embedded underline in the title indicates a mnemonic.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a preferences page
</parameter_description>
</parameter>
<parameter name="use_underline">
<parameter_description> `TRUE` if underlines in the text indicate mnemonics
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_preferences_row_get_title">
<description>
Gets the title of the preference represented by @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a preferences row
</parameter_description>
</parameter>
</parameters>
<return> the title

</return>
</function>

<function name="adw_preferences_row_get_title_selectable">
<description>
Gets whether the user can copy the title from the label

Since: 1.1

</description>
<parameters>
<parameter name="self">
<parameter_description> a `AdwPreferencesRow`
</parameter_description>
</parameter>
</parameters>
<return> whether the user can copy the title from the label

</return>
</function>

<function name="adw_preferences_row_get_use_markup">
<description>
Gets whether to use Pango markup for the title label.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a preferences row
</parameter_description>
</parameter>
</parameters>
<return> whether to use markup

</return>
</function>

<function name="adw_preferences_row_get_use_underline">
<description>
Gets whether an embedded underline in the title indicates a mnemonic.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a preferences row
</parameter_description>
</parameter>
</parameters>
<return> whether an embedded underline in the title indicates a mnemonic

</return>
</function>

<function name="adw_preferences_row_new">
<description>
Creates a new `AdwPreferencesRow`.

Since: 1.0

</description>
<parameters>
</parameters>
<return> the newly created `AdwPreferencesRow`

</return>
</function>

<function name="adw_preferences_row_set_title">
<description>
Sets the title of the preference represented by @self.

The title is interpreted as Pango markup unless
[property@PreferencesRow:use-markup] is set to `FALSE`.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a preferences row
</parameter_description>
</parameter>
<parameter name="title">
<parameter_description> the title
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_preferences_row_set_title_selectable">
<description>
Sets whether the user can copy the title from the label

See also [property@Gtk.Label:selectable].

Since: 1.1

</description>
<parameters>
<parameter name="self">
<parameter_description> a `AdwPreferencesRow`
</parameter_description>
</parameter>
<parameter name="title_selectable">
<parameter_description> `TRUE` if the user can copy the title from the label
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_preferences_row_set_use_markup">
<description>
Sets whether to use Pango markup for the title label.

Subclasses may also use it for other labels, such as subtitle.

See also [func@Pango.parse_markup].

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a preferences row
</parameter_description>
</parameter>
<parameter name="use_markup">
<parameter_description> whether to use markup
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_preferences_row_set_use_underline">
<description>
Sets whether an embedded underline in the title indicates a mnemonic.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a preferences row
</parameter_description>
</parameter>
<parameter name="use_underline">
<parameter_description> `TRUE` if underlines in the text indicate mnemonics
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_preferences_window_add">
<description>
Adds a preferences page to @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a preferences window
</parameter_description>
</parameter>
<parameter name="page">
<parameter_description> the page to add
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_preferences_window_add_toast">
<description>
Displays @toast.

See [method@ToastOverlay.add_toast].

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a preferences window
</parameter_description>
</parameter>
<parameter name="toast">
<parameter_description> a toast
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_preferences_window_close_subpage">
<description>
Closes the current subpage.

If there is no presented subpage, this does nothing.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a preferences window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_preferences_window_get_can_navigate_back">
<description>
Gets whether gestures and shortcuts for closing subpages are enabled.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a preferences window
</parameter_description>
</parameter>
</parameters>
<return> whether gestures and shortcuts are enabled.

</return>
</function>

<function name="adw_preferences_window_get_search_enabled">
<description>
Gets whether search is enabled for @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a preferences window
</parameter_description>
</parameter>
</parameters>
<return> whether search is enabled for @self.

</return>
</function>

<function name="adw_preferences_window_get_visible_page">
<description>
Gets the currently visible page of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a preferences window
</parameter_description>
</parameter>
</parameters>
<return> the visible page

</return>
</function>

<function name="adw_preferences_window_get_visible_page_name">
<description>
Gets the name of currently visible page of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a preferences window
</parameter_description>
</parameter>
</parameters>
<return> the name of the visible page

</return>
</function>

<function name="adw_preferences_window_new">
<description>
Creates a new `AdwPreferencesWindow`.

Since: 1.0

</description>
<parameters>
</parameters>
<return> the newly created `AdwPreferencesWindow`

</return>
</function>

<function name="adw_preferences_window_present_subpage">
<description>
Sets @subpage as the window's subpage and opens it.

The transition can be cancelled by the user, in which case visible child will
change back to the previously visible child.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a preferences window
</parameter_description>
</parameter>
<parameter name="subpage">
<parameter_description> the subpage
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_preferences_window_remove">
<description>
Removes a page from @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a preferences window
</parameter_description>
</parameter>
<parameter name="page">
<parameter_description> the page to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_preferences_window_set_can_navigate_back">
<description>
Sets whether gestures and shortcuts for closing subpages are enabled.

The supported gestures are:

- One-finger swipe on touchscreens
- Horizontal scrolling on touchpads (usually two-finger swipe)
- Back mouse button

The keyboard back key is also supported, as well as the
&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;←&lt;/kbd&gt; shortcut.

For right-to-left locales, gestures and shortcuts are reversed.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a preferences window
</parameter_description>
</parameter>
<parameter name="can_navigate_back">
<parameter_description> the new value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_preferences_window_set_search_enabled">
<description>
Sets whether search is enabled for @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a preferences window
</parameter_description>
</parameter>
<parameter name="search_enabled">
<parameter_description> whether search is enabled
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_preferences_window_set_visible_page">
<description>
Makes @page the visible page of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a preferences window
</parameter_description>
</parameter>
<parameter name="page">
<parameter_description> a page of @self
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_preferences_window_set_visible_page_name">
<description>
Makes the page with the given name visible.

See [property@ViewStack:visible-child].

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a preferences window
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the page to make visible
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_property_animation_target_get_object">
<description>
Gets the object animated by @self.

The `AdwPropertyAnimationTarget` instance does not hold a strong reference on
the object; make sure the object is kept alive throughout the target's
lifetime.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a property animation target
</parameter_description>
</parameter>
</parameters>
<return> the animated object

</return>
</function>

<function name="adw_property_animation_target_get_pspec">
<description>
Gets the `GParamSpec` of the property animated by @self.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a property animation target
</parameter_description>
</parameter>
</parameters>
<return> the animated property's `GParamSpec`

</return>
</function>

<function name="adw_property_animation_target_new">
<description>
Creates a new `AdwPropertyAnimationTarget` for the @property_name property on
@object.

Since: 1.2

</description>
<parameters>
<parameter name="object">
<parameter_description> an object to be animated
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> the name of the property on @object to animate
</parameter_description>
</parameter>
</parameters>
<return> the newly created `AdwPropertyAnimationTarget`

</return>
</function>

<function name="adw_property_animation_target_new_for_pspec">
<description>
Creates a new `AdwPropertyAnimationTarget` for the @pspec property on
@object.

Since: 1.2

</description>
<parameters>
<parameter name="object">
<parameter_description> an object to be animated
</parameter_description>
</parameter>
<parameter name="pspec">
<parameter_description> the param spec of the property on @object to animate
</parameter_description>
</parameter>
</parameters>
<return> new newly created `AdwPropertyAnimationTarget`

</return>
</function>

<function name="adw_shadow_helper_new">
<description>
Creates a new `AdwShadowHelper`.

Since: 1.0

</description>
<parameters>
</parameters>
<return> the newly created `AdwShadowHelper`

</return>
</function>

<function name="adw_show_about_window">
<description>
A convenience function for showing an application’s about window.

</description>
<parameters>
<parameter name="parent">
<parameter_description> the parent top-level window
</parameter_description>
</parameter>
<parameter name="first_property_name">
<parameter_description> the name of the first property
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> value of first property, followed by more pairs of property name and
value, `NULL`-terminated
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_split_button_get_child">
<description>
Gets the child widget.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a split button
</parameter_description>
</parameter>
</parameters>
<return> the child widget

</return>
</function>

<function name="adw_split_button_get_direction">
<description>
Gets the direction in which the popup will be popped up.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a split button
</parameter_description>
</parameter>
</parameters>
<return> the direction

</return>
</function>

<function name="adw_split_button_get_dropdown_tooltip">
<description>
Gets the tooltip of the dropdown button of @self.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a split button
</parameter_description>
</parameter>
</parameters>
<return> the dropdown tooltip of @self

</return>
</function>

<function name="adw_split_button_get_icon_name">
<description>
Gets the name of the icon used to automatically populate the button.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a split button
</parameter_description>
</parameter>
</parameters>
<return> the icon name

</return>
</function>

<function name="adw_split_button_get_label">
<description>
Gets the label for @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a split button
</parameter_description>
</parameter>
</parameters>
<return> the label for @self

</return>
</function>

<function name="adw_split_button_get_menu_model">
<description>
Gets the menu model from which the popup will be created.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a split button
</parameter_description>
</parameter>
</parameters>
<return> the menu model

</return>
</function>

<function name="adw_split_button_get_popover">
<description>
Gets the popover that will be popped up when the dropdown is clicked.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a split button
</parameter_description>
</parameter>
</parameters>
<return> the popover

</return>
</function>

<function name="adw_split_button_get_use_underline">
<description>
Gets whether an underline in the text indicates a mnemonic.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a split button
</parameter_description>
</parameter>
</parameters>
<return> whether an underline in the text indicates a mnemonic

</return>
</function>

<function name="adw_split_button_new">
<description>
Creates a new `AdwSplitButton`.

Since: 1.0

</description>
<parameters>
</parameters>
<return> the newly created `AdwSplitButton`

</return>
</function>

<function name="adw_split_button_popdown">
<description>
Dismisses the menu.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a split button
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_split_button_popup">
<description>
Pops up the menu.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a split button
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_split_button_set_child">
<description>
Sets the child widget.

Setting the child widget will set [property@SplitButton:label] and
[property@SplitButton:icon-name] to `NULL`.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a split button
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the new child widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_split_button_set_direction">
<description>
Sets the direction in which the popup will be popped up.

The dropdown arrow icon will point at the same direction.

If the does not fit in the available space in the given direction, GTK will
try its best to keep it inside the screen and fully visible.

If you pass `GTK_ARROW_NONE`, it's equivalent to `GTK_ARROW_DOWN`.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a split button
</parameter_description>
</parameter>
<parameter name="direction">
<parameter_description> the direction
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_split_button_set_dropdown_tooltip">
<description>
Sets the tooltip of the dropdown button of @self.

The tooltip can be marked up with the Pango text markup language.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a split button
</parameter_description>
</parameter>
<parameter name="tooltip">
<parameter_description> the dropdown tooltip of @self
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_split_button_set_icon_name">
<description>
Sets the name of the icon used to automatically populate the button.

Setting the icon name will set [property@SplitButton:label] and
[property@SplitButton:child] to `NULL`.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a split button
</parameter_description>
</parameter>
<parameter name="icon_name">
<parameter_description> the icon name to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_split_button_set_label">
<description>
Sets the label for @self.

Setting the label will set [property@SplitButton:icon-name] and
[property@SplitButton:child] to `NULL`.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a split button
</parameter_description>
</parameter>
<parameter name="label">
<parameter_description> the label to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_split_button_set_menu_model">
<description>
Sets the menu model from which the popup will be created.

If the menu model is `NULL`, the dropdown is disabled.

A [class@Gtk.Popover] will be created from the menu model with
[ctor@Gtk.PopoverMenu.new_from_model]. Actions will be connected as
documented for this function.

If [property@SplitButton:popover] is already set, it will be dissociated from
the button, and the property is set to `NULL`.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a split button
</parameter_description>
</parameter>
<parameter name="menu_model">
<parameter_description> the menu model
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_split_button_set_popover">
<description>
Sets the popover that will be popped up when the dropdown is clicked.

If the popover is `NULL`, the dropdown is disabled.

If [property@SplitButton:menu-model] is set, the menu model is dissociated
from the button, and the property is set to `NULL`.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a split button
</parameter_description>
</parameter>
<parameter name="popover">
<parameter_description> the popover
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_split_button_set_use_underline">
<description>
Sets whether an underline in the text indicates a mnemonic.

See [property@SplitButton:label].

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a split button
</parameter_description>
</parameter>
<parameter name="use_underline">
<parameter_description> whether an underline in the text indicates a mnemonic
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_spring_animation_get_clamp">
<description>
Gets whether @self should be clamped.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a spring animation
</parameter_description>
</parameter>
</parameters>
<return> whether @self is clamped

</return>
</function>

<function name="adw_spring_animation_get_epsilon">
<description>
Gets the precision of the spring.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a spring animation
</parameter_description>
</parameter>
</parameters>
<return> the epsilon value

</return>
</function>

<function name="adw_spring_animation_get_estimated_duration">
<description>
Gets the estimated duration of @self.

Can be [const@DURATION_INFINITE] if the spring damping is set to 0.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a spring animation
</parameter_description>
</parameter>
</parameters>
<return> the estimated duration

</return>
</function>

<function name="adw_spring_animation_get_initial_velocity">
<description>
Gets the initial velocity of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a spring animation
</parameter_description>
</parameter>
</parameters>
<return> the initial velocity

</return>
</function>

<function name="adw_spring_animation_get_spring_params">
<description>
Gets the physical parameters of the spring of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a spring animation
</parameter_description>
</parameter>
</parameters>
<return> the spring parameters

</return>
</function>

<function name="adw_spring_animation_get_value_from">
<description>
Gets the value @self will animate from.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a spring animation
</parameter_description>
</parameter>
</parameters>
<return> the value to animate from

</return>
</function>

<function name="adw_spring_animation_get_value_to">
<description>
Gets the value @self will animate to.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a spring animation
</parameter_description>
</parameter>
</parameters>
<return> the value to animate to

</return>
</function>

<function name="adw_spring_animation_get_velocity">
<description>
Gets the current velocity of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a spring animation
</parameter_description>
</parameter>
</parameters>
<return> the current velocity

</return>
</function>

<function name="adw_spring_animation_new">
<description>
Creates a new `AdwSpringAnimation` on @widget.

The animation will animate @target from @from to @to with the dynamics of a
spring described by @spring_params.

Since: 1.0

</description>
<parameters>
<parameter name="widget">
<parameter_description> a widget to create animation on
</parameter_description>
</parameter>
<parameter name="from">
<parameter_description> a value to animate from
</parameter_description>
</parameter>
<parameter name="to">
<parameter_description> a value to animate to
</parameter_description>
</parameter>
<parameter name="spring_params">
<parameter_description> physical parameters of the spring
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> a target value to animate
</parameter_description>
</parameter>
</parameters>
<return> the newly created animation

</return>
</function>

<function name="adw_spring_animation_set_clamp">
<description>
Sets whether @self should be clamped.

If set to `TRUE`, the animation will abruptly end as soon as it reaches the
final value, preventing overshooting.

It won't prevent overshooting [property@SpringAnimation:value-from] if a
relative negative [property@SpringAnimation:initial-velocity] is set.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a spring animation
</parameter_description>
</parameter>
<parameter name="clamp">
<parameter_description> the new value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_spring_animation_set_epsilon">
<description>
Sets the precision of the spring.

The level of precision used to determine when the animation has come to a
rest, that is, when the amplitude of the oscillations becomes smaller than
this value.

If the epsilon value is too small, the animation will take a long time to
stop after the animated value has stopped visibly changing.

If the epsilon value is too large, the animation will end prematurely.

The default value is 0.001.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a spring animation
</parameter_description>
</parameter>
<parameter name="epsilon">
<parameter_description> the new value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_spring_animation_set_initial_velocity">
<description>
Sets the initial velocity of @self.

Initial velocity affects only the animation curve, but not its duration.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a spring animation
</parameter_description>
</parameter>
<parameter name="velocity">
<parameter_description> the initial velocity
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_spring_animation_set_spring_params">
<description>
Sets the physical parameters of the spring of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a spring animation
</parameter_description>
</parameter>
<parameter name="spring_params">
<parameter_description> the new spring parameters
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_spring_animation_set_value_from">
<description>
Sets the value @self will animate from.

The animation will start at this value and end at
[property@SpringAnimation:value-to].

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a spring animation
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value to animate from
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_spring_animation_set_value_to">
<description>
Sets the value @self will animate to.

The animation will start at [property@SpringAnimation:value-from] and end at
this value.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a spring animation
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value to animate to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_spring_params_get_damping">
<description>
Gets the damping of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> spring params
</parameter_description>
</parameter>
</parameters>
<return> the damping

</return>
</function>

<function name="adw_spring_params_get_damping_ratio">
<description>
Gets the damping ratio of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> spring params
</parameter_description>
</parameter>
</parameters>
<return> the damping ratio

</return>
</function>

<function name="adw_spring_params_get_mass">
<description>
Gets the mass of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> spring params
</parameter_description>
</parameter>
</parameters>
<return> the mass

</return>
</function>

<function name="adw_spring_params_get_stiffness">
<description>
Gets the stiffness of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> spring params
</parameter_description>
</parameter>
</parameters>
<return> the stiffness

</return>
</function>

<function name="adw_spring_params_new">
<description>
Creates a new `AdwSpringParams` from @mass, @stiffness and @damping_ratio.

The damping value is calculated from @damping_ratio and the other two
parameters.

* If @damping_ratio is 0, the spring will not be damped and will oscillate
endlessly.
* If @damping_ratio is between 0 and 1, the spring is underdamped and will
always overshoot.
* If @damping_ratio is 1, the spring is critically damped and will reach its
resting position the quickest way possible.
* If @damping_ratio is larger than 1, the spring is overdamped and will reach
its resting position faster than it can complete an oscillation.

[ctor@SpringParams.new_full] allows to pass a raw damping value instead.

Since: 1.0

</description>
<parameters>
<parameter name="damping_ratio">
<parameter_description> the damping ratio of the spring
</parameter_description>
</parameter>
<parameter name="mass">
<parameter_description> the mass of the spring
</parameter_description>
</parameter>
<parameter name="stiffness">
<parameter_description> the stiffness of the spring
</parameter_description>
</parameter>
</parameters>
<return> the newly created spring parameters

</return>
</function>

<function name="adw_spring_params_new_full">
<description>
Creates a new `AdwSpringParams` from @mass, @stiffness and @damping.

See [ctor@SpringParams.new] for a simplified constructor using damping ratio
instead of @damping.

Since: 1.0

</description>
<parameters>
<parameter name="damping">
<parameter_description> the damping of the spring
</parameter_description>
</parameter>
<parameter name="mass">
<parameter_description> the mass of the spring
</parameter_description>
</parameter>
<parameter name="stiffness">
<parameter_description> the stiffness of the spring
</parameter_description>
</parameter>
</parameters>
<return> the newly created spring parameters

</return>
</function>

<function name="adw_spring_params_ref">
<description>
Increases the reference count of @self.

Return: (transfer full): @self

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> spring params
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_spring_params_unref">
<description>
Decreases the reference count of @self.

If the last reference is dropped, the structure is freed.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> spring params
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_squeezer_add">
<description>
Adds a child to @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a squeezer
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the widget to add
</parameter_description>
</parameter>
</parameters>
<return> the [class@SqueezerPage] for @child

</return>
</function>

<function name="adw_squeezer_get_allow_none">
<description>
Gets whether to allow squeezing beyond the last child's minimum size.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a squeezer
</parameter_description>
</parameter>
</parameters>
<return> whether @self allows squeezing beyond the last child

</return>
</function>

<function name="adw_squeezer_get_homogeneous">
<description>
Gets whether all children have the same size for the opposite orientation.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a squeezer
</parameter_description>
</parameter>
</parameters>
<return> whether @self is homogeneous

</return>
</function>

<function name="adw_squeezer_get_interpolate_size">
<description>
Gets whether @self interpolates its size when changing the visible child.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> A squeezer
</parameter_description>
</parameter>
</parameters>
<return> whether the size is interpolated

</return>
</function>

<function name="adw_squeezer_get_page">
<description>
Returns the [class@SqueezerPage] object for @child.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a squeezer
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a child of @self
</parameter_description>
</parameter>
</parameters>
<return> the page object for @child

</return>
</function>

<function name="adw_squeezer_get_pages">
<description>
Returns a [iface@Gio.ListModel] that contains the pages of @self.

This can be used to keep an up-to-date view. The model also implements
[iface@Gtk.SelectionModel] and can be used to track the visible page.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a squeezer
</parameter_description>
</parameter>
</parameters>
<return> a `GtkSelectionModel` for the squeezer's children

</return>
</function>

<function name="adw_squeezer_get_switch_threshold_policy">
<description>
Gets the switch threshold policy for @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a squeezer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_squeezer_get_transition_duration">
<description>
Gets the transition animation duration for @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a squeezer
</parameter_description>
</parameter>
</parameters>
<return> the transition duration, in milliseconds

</return>
</function>

<function name="adw_squeezer_get_transition_running">
<description>
Gets whether a transition is currently running for @self.

If a transition is impossible, the property value will be set to `TRUE` and
then immediately to `FALSE`, so it's possible to rely on its notifications
to know that a transition has happened.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a squeezer
</parameter_description>
</parameter>
</parameters>
<return> whether a transition is currently running

</return>
</function>

<function name="adw_squeezer_get_transition_type">
<description>
Gets the type of animation used for transitions between children in @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a squeezer
</parameter_description>
</parameter>
</parameters>
<return> the current transition type of @self

</return>
</function>

<function name="adw_squeezer_get_visible_child">
<description>
Gets the currently visible child of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a squeezer
</parameter_description>
</parameter>
</parameters>
<return> the visible child

</return>
</function>

<function name="adw_squeezer_get_xalign">
<description>
Gets the horizontal alignment, from 0 (start) to 1 (end).

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a squeezer
</parameter_description>
</parameter>
</parameters>
<return> the alignment value

</return>
</function>

<function name="adw_squeezer_get_yalign">
<description>
Gets the vertical alignment, from 0 (top) to 1 (bottom).

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a squeezer
</parameter_description>
</parameter>
</parameters>
<return> the alignment value

</return>
</function>

<function name="adw_squeezer_new">
<description>
Creates a new `AdwSqueezer`.

Since: 1.0

</description>
<parameters>
</parameters>
<return> the newly created `AdwSqueezer`

</return>
</function>

<function name="adw_squeezer_page_get_child">
<description>
Returns the squeezer child to which @self belongs.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a squeezer page
</parameter_description>
</parameter>
</parameters>
<return> the child to which @self belongs

</return>
</function>

<function name="adw_squeezer_page_get_enabled">
<description>
Gets whether @self is enabled.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a squeezer page
</parameter_description>
</parameter>
</parameters>
<return> whether @self is enabled

</return>
</function>

<function name="adw_squeezer_page_set_enabled">
<description>
Sets whether @self is enabled.

If a child is disabled, it will be ignored when looking for the child
fitting the available size best.

This allows to programmatically and prematurely hide a child even if it fits
in the available space.

This can be used e.g. to ensure a certain child is hidden below a certain
window width, or any other constraint you find suitable.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a squeezer page
</parameter_description>
</parameter>
<parameter name="enabled">
<parameter_description> whether @self is enabled
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_squeezer_remove">
<description>
Removes a child widget from @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a squeezer
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the child to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_squeezer_set_allow_none">
<description>
Sets whether to allow squeezing beyond the last child's minimum size.

If set to `TRUE`, the squeezer can shrink to the point where no child can be
shown. This is functionally equivalent to appending a widget with 0×0 minimum
size.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a squeezer
</parameter_description>
</parameter>
<parameter name="allow_none">
<parameter_description> whether @self allows squeezing beyond the last child
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_squeezer_set_homogeneous">
<description>
Sets whether all children have the same size for the opposite orientation.

For example, if a squeezer is horizontal and is homogeneous, it will request
the same height for all its children. If it isn't, the squeezer may change
size when a different child becomes visible.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a squeezer
</parameter_description>
</parameter>
<parameter name="homogeneous">
<parameter_description> whether @self is homogeneous
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_squeezer_set_interpolate_size">
<description>
Sets whether @self interpolates its size when changing the visible child.

If `TRUE`, the squeezer will interpolate its size between the one of the
previous visible child and the one of the new visible child, according to the
set transition duration and the orientation, e.g. if the squeezer is
horizontal, it will interpolate the its height.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> A squeezer
</parameter_description>
</parameter>
<parameter name="interpolate_size">
<parameter_description> whether to interpolate the size
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_squeezer_set_switch_threshold_policy">
<description>
Sets the switch threshold policy for @self.

Determines when the squeezer will switch children.

If set to `ADW_FOLD_THRESHOLD_POLICY_MINIMUM`, it will only switch when the
visible child cannot fit anymore. With `ADW_FOLD_THRESHOLD_POLICY_NATURAL`,
it will switch as soon as the visible child doesn't get their natural size.

This can be useful if you have a long ellipsizing label and want to let it
ellipsize instead of immediately switching.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a squeezer
</parameter_description>
</parameter>
<parameter name="policy">
<parameter_description> the policy to use
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_squeezer_set_transition_duration">
<description>
Sets the transition animation duration for @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a squeezer
</parameter_description>
</parameter>
<parameter name="duration">
<parameter_description> the new duration, in milliseconds
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_squeezer_set_transition_type">
<description>
Sets the type of animation used for transitions between children in @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a squeezer
</parameter_description>
</parameter>
<parameter name="transition">
<parameter_description> the new transition type
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_squeezer_set_xalign">
<description>
Sets the horizontal alignment, from 0 (start) to 1 (end).

This affects the children allocation during transitions, when they exceed the
size of the squeezer.

For example, 0.5 means the child will be centered, 0 means it will keep the
start side aligned and overflow the end side, and 1 means the opposite.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a squeezer
</parameter_description>
</parameter>
<parameter name="xalign">
<parameter_description> the new alignment value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_squeezer_set_yalign">
<description>
Sets the vertical alignment, from 0 (top) to 1 (bottom).

This affects the children allocation during transitions, when they exceed the
size of the squeezer.

For example, 0.5 means the child will be centered, 0 means it will keep the
top side aligned and overflow the bottom side, and 1 means the opposite.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a squeezer
</parameter_description>
</parameter>
<parameter name="yalign">
<parameter_description> the new alignment value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_status_page_get_child">
<description>
Gets the child widget of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a status page
</parameter_description>
</parameter>
</parameters>
<return> the child widget of @self

</return>
</function>

<function name="adw_status_page_get_description">
<description>
Gets the description for @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a status page
</parameter_description>
</parameter>
</parameters>
<return> the description

</return>
</function>

<function name="adw_status_page_get_icon_name">
<description>
Gets the icon name for @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a status page
</parameter_description>
</parameter>
</parameters>
<return> the icon name

</return>
</function>

<function name="adw_status_page_get_paintable">
<description>
Gets the paintable for @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a status page
</parameter_description>
</parameter>
</parameters>
<return> the paintable

</return>
</function>

<function name="adw_status_page_get_title">
<description>
Gets the title for @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a status page
</parameter_description>
</parameter>
</parameters>
<return> the title

</return>
</function>

<function name="adw_status_page_new">
<description>
Creates a new `AdwStatusPage`.

Since: 1.0

</description>
<parameters>
</parameters>
<return> the newly created `AdwStatusPage`

</return>
</function>

<function name="adw_status_page_set_child">
<description>
Sets the child widget of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a status page
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the child widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_status_page_set_description">
<description>
Sets the description for @self.

The description is displayed below the title.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a status page
</parameter_description>
</parameter>
<parameter name="description">
<parameter_description> the description
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_status_page_set_icon_name">
<description>
Sets the icon name for @self.

Changing this will set [property@StatusPage:paintable] to `NULL`.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a status page
</parameter_description>
</parameter>
<parameter name="icon_name">
<parameter_description> the icon name
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_status_page_set_paintable">
<description>
Sets the paintable for @self.

Changing this will set [property@StatusPage:icon-name] to `NULL`.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a status page
</parameter_description>
</parameter>
<parameter name="paintable">
<parameter_description> the paintable
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_status_page_set_title">
<description>
Sets the title for @self.

The title is displayed below the icon.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a status page
</parameter_description>
</parameter>
<parameter name="title">
<parameter_description> the title
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_style_manager_get_color_scheme">
<description>
Gets the requested application color scheme.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a style manager
</parameter_description>
</parameter>
</parameters>
<return> the color scheme

</return>
</function>

<function name="adw_style_manager_get_dark">
<description>
Gets whether the application is using dark appearance.

This can be used to query the current appearance, as requested via
[property@StyleManager:color-scheme].

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a style manager
</parameter_description>
</parameter>
</parameters>
<return> whether the application is using dark appearance

</return>
</function>

<function name="adw_style_manager_get_default">
<description>
Gets the default `AdwStyleManager` instance.

It manages all [class@Gdk.Display] instances unless the style manager for
that display has an override.

See [func@StyleManager.get_for_display].

Since: 1.0

</description>
<parameters>
</parameters>
<return> the default style manager

</return>
</function>

<function name="adw_style_manager_get_display">
<description>
Gets the display the style manager is associated with.

The display will be `NULL` for the style manager returned by
[func@StyleManager.get_default].

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a style manager
</parameter_description>
</parameter>
</parameters>
<return> the display

</return>
</function>

<function name="adw_style_manager_get_for_display">
<description>
Gets the `AdwStyleManager` instance managing @display.

It can be used to override styles for that specific display instead of the
whole application.

Most applications should use [func@StyleManager.get_default] instead.

Since: 1.0

</description>
<parameters>
<parameter name="display">
<parameter_description> a `GdkDisplay`
</parameter_description>
</parameter>
</parameters>
<return> the style manager for @display

</return>
</function>

<function name="adw_style_manager_get_high_contrast">
<description>
Gets whether the application is using high contrast appearance.

This cannot be overridden by applications.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a style manager
</parameter_description>
</parameter>
</parameters>
<return> whether the application is using high contrast appearance

</return>
</function>

<function name="adw_style_manager_get_system_supports_color_schemes">
<description>
Gets whether the system supports color schemes.

This can be used to check if the current environment provides a color scheme
preference. For example, applications might want to show a separate
appearance switcher if it's set to `FALSE`.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a style manager
</parameter_description>
</parameter>
</parameters>
<return> whether the system supports color schemes

</return>
</function>

<function name="adw_style_manager_set_color_scheme">
<description>
Sets the requested application color scheme.

The effective appearance will be decided based on the application color
scheme and the system preferred color scheme. The
[property@StyleManager:dark] property can be used to query the current
effective appearance.

The `ADW_COLOR_SCHEME_PREFER_LIGHT` color scheme results in the application
using light appearance unless the system prefers dark colors. This is the
default value.

The `ADW_COLOR_SCHEME_PREFER_DARK` color scheme results in the application
using dark appearance, but can still switch to the light appearance if the
system can prefers it, for example, when the high contrast preference is
enabled.

The `ADW_COLOR_SCHEME_FORCE_LIGHT` and `ADW_COLOR_SCHEME_FORCE_DARK` values
ignore the system preference entirely. They are useful if the application
wants to match its UI to its content or to provide a separate color scheme
switcher.

If a per-[class@Gdk.Display] style manager has its color scheme set to
`ADW_COLOR_SCHEME_DEFAULT`, it will inherit the color scheme from the
default style manager.

For the default style manager, `ADW_COLOR_SCHEME_DEFAULT` is equivalent to
`ADW_COLOR_SCHEME_PREFER_LIGHT`.

The [property@StyleManager:system-supports-color-schemes] property can be
used to check if the current environment provides a color scheme
preference.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a style manager
</parameter_description>
</parameter>
<parameter name="color_scheme">
<parameter_description> the color scheme
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_swipe_tracker_get_allow_long_swipes">
<description>
Gets whether to allow swiping for more than one snap point at a time.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a swipe tracker
</parameter_description>
</parameter>
</parameters>
<return> whether long swipes are allowed

</return>
</function>

<function name="adw_swipe_tracker_get_allow_mouse_drag">
<description>
Gets whether @self can be dragged with mouse pointer.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a swipe tracker
</parameter_description>
</parameter>
</parameters>
<return> whether mouse dragging is allowed

</return>
</function>

<function name="adw_swipe_tracker_get_enabled">
<description>
Gets whether @self is enabled.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a swipe tracker
</parameter_description>
</parameter>
</parameters>
<return> whether @self is enabled

</return>
</function>

<function name="adw_swipe_tracker_get_reversed">
<description>
Gets whether @self is reversing the swipe direction.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a swipe tracker
</parameter_description>
</parameter>
</parameters>
<return> whether the direction is reversed

</return>
</function>

<function name="adw_swipe_tracker_get_swipeable">
<description>
Get the widget @self is attached to.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a swipe tracker
</parameter_description>
</parameter>
</parameters>
<return> the swipeable widget

</return>
</function>

<function name="adw_swipe_tracker_new">
<description>
Creates a new `AdwSwipeTracker` for @widget.

Since: 1.0

</description>
<parameters>
<parameter name="swipeable">
<parameter_description> a widget to add the tracker on
</parameter_description>
</parameter>
</parameters>
<return> the newly created `AdwSwipeTracker`

</return>
</function>

<function name="adw_swipe_tracker_set_allow_long_swipes">
<description>
Sets whether to allow swiping for more than one snap point at a time.

If the value is `FALSE`, each swipe can only move to the adjacent snap
points.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a swipe tracker
</parameter_description>
</parameter>
<parameter name="allow_long_swipes">
<parameter_description> whether to allow long swipes
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_swipe_tracker_set_allow_mouse_drag">
<description>
Sets whether @self can be dragged with mouse pointer.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a swipe tracker
</parameter_description>
</parameter>
<parameter name="allow_mouse_drag">
<parameter_description> whether to allow mouse dragging
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_swipe_tracker_set_enabled">
<description>
Sets whether @self is enabled.

When it's not enabled, no events will be processed. Usually widgets will want
to expose this via a property.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a swipe tracker
</parameter_description>
</parameter>
<parameter name="enabled">
<parameter_description> whether @self is enabled
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_swipe_tracker_set_reversed">
<description>
Sets whether to reverse the swipe direction.

If the swipe tracker is horizontal, it can be used for supporting RTL text
direction.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a swipe tracker
</parameter_description>
</parameter>
<parameter name="reversed">
<parameter_description> whether to reverse the swipe direction
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_swipe_tracker_shift_position">
<description>
Moves the current progress value by @delta.

This can be used to adjust the current position if snap points move during
the gesture.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a swipe tracker
</parameter_description>
</parameter>
<parameter name="delta">
<parameter_description> the position delta
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_swipeable_get_cancel_progress">
<description>
Gets the progress @self will snap back to after the gesture is canceled.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a swipeable
</parameter_description>
</parameter>
</parameters>
<return> the cancel progress, unitless

</return>
</function>

<function name="adw_swipeable_get_distance">
<description>
Gets the swipe distance of @self.

This corresponds to how many pixels 1 unit represents.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a swipeable
</parameter_description>
</parameter>
</parameters>
<return> the swipe distance in pixels

</return>
</function>

<function name="adw_swipeable_get_progress">
<description>
Gets the current progress of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a swipeable
</parameter_description>
</parameter>
</parameters>
<return> the current progress, unitless

</return>
</function>

<function name="adw_swipeable_get_snap_points">
<description>
Gets the snap points of @self.

Each snap point represents a progress value that is considered acceptable to
end the swipe on.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a swipeable
</parameter_description>
</parameter>
<parameter name="n_snap_points">
<parameter_description> location to return the number of the snap points
</parameter_description>
</parameter>
</parameters>
<return> the snap points

</return>
</function>

<function name="adw_swipeable_get_swipe_area">
<description>
Gets the area @self can start a swipe from for the given direction and
gesture type.

This can be used to restrict swipes to only be possible from a certain area,
for example, to only allow edge swipes, or to have a draggable element and
ignore swipes elsewhere.

If not implemented, the default implementation returns the allocation of
@self, allowing swipes from anywhere.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a swipeable
</parameter_description>
</parameter>
<parameter name="navigation_direction">
<parameter_description> the direction of the swipe
</parameter_description>
</parameter>
<parameter name="is_drag">
<parameter_description> whether the swipe is caused by a dragging gesture
</parameter_description>
</parameter>
<parameter name="rect">
<parameter_description> a pointer to a rectangle to store the swipe area
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_tab_bar_get_autohide">
<description>
Gets whether the tabs automatically hide.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab bar
</parameter_description>
</parameter>
</parameters>
<return> whether the tabs automatically hide

</return>
</function>

<function name="adw_tab_bar_get_end_action_widget">
<description>
Gets the widget shown after the tabs.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab bar
</parameter_description>
</parameter>
</parameters>
<return> the widget shown after the tabs

</return>
</function>

<function name="adw_tab_bar_get_expand_tabs">
<description>
Gets whether tabs expand to full width.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab bar
</parameter_description>
</parameter>
</parameters>
<return> whether tabs expand to full width.

</return>
</function>

<function name="adw_tab_bar_get_inverted">
<description>
Gets whether tabs use inverted layout.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab bar
</parameter_description>
</parameter>
</parameters>
<return> whether tabs use inverted layout

</return>
</function>

<function name="adw_tab_bar_get_is_overflowing">
<description>
Gets whether @self is overflowing.

If `TRUE`, all tabs cannot be displayed at once and require scrolling.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab bar
</parameter_description>
</parameter>
</parameters>
<return> whether @self is overflowing

</return>
</function>

<function name="adw_tab_bar_get_start_action_widget">
<description>
Gets the widget shown before the tabs.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab bar
</parameter_description>
</parameter>
</parameters>
<return> the widget shown before the tabs

</return>
</function>

<function name="adw_tab_bar_get_tabs_revealed">
<description>
Gets whether the tabs are currently revealed.

See [property@TabBar:autohide].

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab bar
</parameter_description>
</parameter>
</parameters>
<return> whether the tabs are currently revealed

</return>
</function>

<function name="adw_tab_bar_get_view">
<description>
Gets the tab view @self controls.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab bar
</parameter_description>
</parameter>
</parameters>
<return> the view @self controls

</return>
</function>

<function name="adw_tab_bar_new">
<description>
Creates a new `AdwTabBar`.

Since: 1.0

</description>
<parameters>
</parameters>
<return> the newly created `AdwTabBar`

</return>
</function>

<function name="adw_tab_bar_set_autohide">
<description>
Sets whether the tabs automatically hide.

If set to `TRUE`, the tab bar disappears when [property@TabBar:view] has 0
or 1 tab, no pinned tabs, and no tab is being transferred.

See [property@TabBar:tabs-revealed].

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab bar
</parameter_description>
</parameter>
<parameter name="autohide">
<parameter_description> whether the tabs automatically hide
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_tab_bar_set_end_action_widget">
<description>
Sets the widget to show after the tabs.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab bar
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> the widget to show after the tabs
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_tab_bar_set_expand_tabs">
<description>
Sets whether tabs expand to full width.

If set to `TRUE`, the tabs will always vary width filling the whole width
when possible, otherwise tabs will always have the minimum possible size.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab bar
</parameter_description>
</parameter>
<parameter name="expand_tabs">
<parameter_description> whether to expand tabs
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_tab_bar_set_inverted">
<description>
Sets whether tabs tabs use inverted layout.

If set to `TRUE`, non-pinned tabs will have the close button at the beginning
and the indicator at the end rather than the opposite.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab bar
</parameter_description>
</parameter>
<parameter name="inverted">
<parameter_description> whether tabs use inverted layout
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_tab_bar_set_start_action_widget">
<description>
Sets the widget to show before the tabs.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab bar
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> the widget to show before the tabs
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_tab_bar_set_view">
<description>
Sets the tab view @self controls.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab bar
</parameter_description>
</parameter>
<parameter name="view">
<parameter_description> a tab view
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_tab_bar_setup_extra_drop_target">
<description>
Sets the supported types for this drop target.

Sets up an extra drop target on tabs.

This allows to drag arbitrary content onto tabs, for example URLs in a web
browser.

If a tab is hovered for a certain period of time while dragging the content,
it will be automatically selected.

The [signal@TabBar::extra-drag-drop] signal can be used to handle the drop.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab bar
</parameter_description>
</parameter>
<parameter name="actions">
<parameter_description> the supported actions
</parameter_description>
</parameter>
<parameter name="types">
<parameter_description>
all supported `GType`s that can be dropped
</parameter_description>
</parameter>
<parameter name="n_types">
<parameter_description> number of @types
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_tab_page_get_child">
<description>
Gets the child of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab page
</parameter_description>
</parameter>
</parameters>
<return> the child of @self

</return>
</function>

<function name="adw_tab_page_get_icon">
<description>
Gets the icon of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab page
</parameter_description>
</parameter>
</parameters>
<return> the icon of @self

</return>
</function>

<function name="adw_tab_page_get_indicator_activatable">
<description>
Gets whether the indicator of @self is activatable.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab page
</parameter_description>
</parameter>
</parameters>
<return> whether the indicator is activatable

</return>
</function>

<function name="adw_tab_page_get_indicator_icon">
<description>
Gets the indicator icon of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab page
</parameter_description>
</parameter>
</parameters>
<return> the indicator icon of @self

</return>
</function>

<function name="adw_tab_page_get_indicator_tooltip">
<description>
Gets the tooltip of the indicator icon of @self.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab page
</parameter_description>
</parameter>
</parameters>
<return> the indicator tooltip of @self

</return>
</function>

<function name="adw_tab_page_get_loading">
<description>
Gets whether @self is loading.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab page
</parameter_description>
</parameter>
</parameters>
<return> whether @self is loading

</return>
</function>

<function name="adw_tab_page_get_needs_attention">
<description>
Gets whether @self needs attention.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab page
</parameter_description>
</parameter>
</parameters>
<return> whether @self needs attention

</return>
</function>

<function name="adw_tab_page_get_parent">
<description>
Gets the parent page of @self.

See [method@TabView.add_page] and [method@TabView.close_page].

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab page
</parameter_description>
</parameter>
</parameters>
<return> the parent page

</return>
</function>

<function name="adw_tab_page_get_pinned">
<description>
Gets whether @self is pinned.

See [method@TabView.set_page_pinned].

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab page
</parameter_description>
</parameter>
</parameters>
<return> whether @self is pinned

</return>
</function>

<function name="adw_tab_page_get_selected">
<description>
Gets whether @self is selected.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab page
</parameter_description>
</parameter>
</parameters>
<return> whether @self is selected

</return>
</function>

<function name="adw_tab_page_get_title">
<description>
Gets the title of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab page
</parameter_description>
</parameter>
</parameters>
<return> the title of @self

</return>
</function>

<function name="adw_tab_page_get_tooltip">
<description>
Gets the tooltip of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab page
</parameter_description>
</parameter>
</parameters>
<return> the tooltip of @self

</return>
</function>

<function name="adw_tab_page_set_icon">
<description>
Sets the icon of @self.

[class@TabBar] displays the icon next to the title.

It will not show the icon if [property@TabPage:loading] is set to `TRUE`,
or if the page is pinned and [propertyTabPage:indicator-icon] is set.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab page
</parameter_description>
</parameter>
<parameter name="icon">
<parameter_description> the icon of @self
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_tab_page_set_indicator_activatable">
<description>
Sets whether the indicator of @self is activatable.

If set to `TRUE`, [signal@TabView::indicator-activated] will be emitted
when the indicator icon is clicked.

If [property@TabPage:indicator-icon] is not set, does nothing.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab page
</parameter_description>
</parameter>
<parameter name="activatable">
<parameter_description> whether the indicator is activatable
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_tab_page_set_indicator_icon">
<description>
Sets the indicator icon of @self.

A common use case is an audio or camera indicator in a web browser.

[class@TabBar] will show it at the beginning of the tab, alongside icon
representing [property@TabPage:icon] or loading spinner.

If the page is pinned, the indicator will be shown instead of icon or
spinner.

[property@TabPage:indicator-tooltip] can be used to set the tooltip on the
indicator icon.

If [property@TabPage:indicator-activatable] is set to `TRUE`, the
indicator icon can act as a button.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab page
</parameter_description>
</parameter>
<parameter name="indicator_icon">
<parameter_description> the indicator icon of @self
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_tab_page_set_indicator_tooltip">
<description>
Sets the tooltip of the indicator icon of @self.

The tooltip can be marked up with the Pango text markup language.

See [property@TabPage:indicator-icon].

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab page
</parameter_description>
</parameter>
<parameter name="tooltip">
<parameter_description> the indicator tooltip of @self
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_tab_page_set_loading">
<description>
Sets whether @self is loading.

If set to `TRUE`, [class@TabBar] will display a spinner in place of icon.

If the page is pinned and [property@TabPage:indicator-icon] is set, the
loading status will not be visible.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab page
</parameter_description>
</parameter>
<parameter name="loading">
<parameter_description> whether @self is loading
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_tab_page_set_needs_attention">
<description>
Sets whether @self needs attention.

[class@TabBar] will display a line under the tab representing the page if
set to `TRUE`. If the tab is not visible, the corresponding edge of the tab
bar will be highlighted.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab page
</parameter_description>
</parameter>
<parameter name="needs_attention">
<parameter_description> whether @self needs attention
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_tab_page_set_title">
<description>
[class@TabBar] will display it in the center of the tab unless it's pinned,
and will use it as a tooltip unless [property@TabPage:tooltip] is set.

Sets the title of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab page
</parameter_description>
</parameter>
<parameter name="title">
<parameter_description> the title of @self
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_tab_page_set_tooltip">
<description>
Sets the tooltip of @self.

The tooltip can be marked up with the Pango text markup language.

If not set, [class@TabBar] will use [property@TabPage:title] as a tooltip
instead.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab page
</parameter_description>
</parameter>
<parameter name="tooltip">
<parameter_description> the tooltip of @self
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_tab_view_add_page">
<description>
Adds @child to @self with @parent as the parent.

This function can be used to automatically position new pages, and to select
the correct page when this page is closed while being selected (see
[method@TabView.close_page]).

If @parent is `NULL`, this function is equivalent to [method@TabView.append].

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab view
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a widget to add
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> a parent page for @child
</parameter_description>
</parameter>
</parameters>
<return> the page object representing @child

</return>
</function>

<function name="adw_tab_view_add_shortcuts">
<description>
Adds @shortcuts for @self.

See [property@TabView:shortcuts] for details.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab view
</parameter_description>
</parameter>
<parameter name="shortcuts">
<parameter_description> the shortcuts to add
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_tab_view_append">
<description>
Inserts @child as the last non-pinned page.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab view
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a widget to add
</parameter_description>
</parameter>
</parameters>
<return> the page object representing @child

</return>
</function>

<function name="adw_tab_view_append_pinned">
<description>
Inserts @child as the last pinned page.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab view
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a widget to add
</parameter_description>
</parameter>
</parameters>
<return> the page object representing @child

</return>
</function>

<function name="adw_tab_view_close_other_pages">
<description>
Requests to close all pages other than @page.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab view
</parameter_description>
</parameter>
<parameter name="page">
<parameter_description> a page of @self
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_tab_view_close_page">
<description>
Requests to close @page.

Calling this function will result in the [signal@TabView::close-page] signal
being emitted for @page. Closing the page can then be confirmed or
denied via [method@TabView.close_page_finish].

If the page is waiting for a [method@TabView.close_page_finish] call, this
function will do nothing.

The default handler for [signal@TabView::close-page] will immediately confirm
closing the page if it's non-pinned, or reject it if it's pinned. This
behavior can be changed by registering your own handler for that signal.

If @page was selected, another page will be selected instead:

If the [property@TabPage:parent] value is `NULL`, the next page will be
selected when possible, or if the page was already last, the previous page
will be selected instead.

If it's not `NULL`, the previous page will be selected if it's a descendant
(possibly indirect) of the parent. If both the previous page and the parent
are pinned, the parent will be selected instead.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab view
</parameter_description>
</parameter>
<parameter name="page">
<parameter_description> a page of @self
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_tab_view_close_page_finish">
<description>
Completes a [method@TabView.close_page] call for @page.

If @confirm is `TRUE`, @page will be closed. If it's `FALSE`, it will be
reverted to its previous state and [method@TabView.close_page] can be called
for it again.

This function should not be called unless a custom handler for
[signal@TabView::close-page] is used.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab view
</parameter_description>
</parameter>
<parameter name="page">
<parameter_description> a page of @self
</parameter_description>
</parameter>
<parameter name="confirm">
<parameter_description> whether to confirm or deny closing @page
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_tab_view_close_pages_after">
<description>
Requests to close all pages after @page.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab view
</parameter_description>
</parameter>
<parameter name="page">
<parameter_description> a page of @self
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_tab_view_close_pages_before">
<description>
Requests to close all pages before @page.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab view
</parameter_description>
</parameter>
<parameter name="page">
<parameter_description> a page of @self
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_tab_view_get_default_icon">
<description>
Gets the default icon of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab view
</parameter_description>
</parameter>
</parameters>
<return> the default icon of @self.

</return>
</function>

<function name="adw_tab_view_get_is_transferring_page">
<description>
Whether a page is being transferred.

The corresponding property will be set to `TRUE` when a drag-n-drop tab
transfer starts on any `AdwTabView`, and to `FALSE` after it ends.

During the transfer, children cannot receive pointer input and a tab can
be safely dropped on the tab view.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab view
</parameter_description>
</parameter>
</parameters>
<return> whether a page is being transferred

</return>
</function>

<function name="adw_tab_view_get_menu_model">
<description>
Gets the tab context menu model for @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab view
</parameter_description>
</parameter>
</parameters>
<return> the tab context menu model for @self

</return>
</function>

<function name="adw_tab_view_get_n_pages">
<description>
Gets the number of pages in @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab view
</parameter_description>
</parameter>
</parameters>
<return> the number of pages in @self

</return>
</function>

<function name="adw_tab_view_get_n_pinned_pages">
<description>
Gets the number of pinned pages in @self.

See [method@TabView.set_page_pinned].

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab view
</parameter_description>
</parameter>
</parameters>
<return> the number of pinned pages in @self

</return>
</function>

<function name="adw_tab_view_get_nth_page">
<description>
Gets the [class@TabPage] representing the child at @position.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab view
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the index of the page in @self, starting from 0
</parameter_description>
</parameter>
</parameters>
<return> the page object at @position

</return>
</function>

<function name="adw_tab_view_get_page">
<description>
Gets the [class@TabPage] object representing @child.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab view
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a child in @self
</parameter_description>
</parameter>
</parameters>
<return> the page object for @child

</return>
</function>

<function name="adw_tab_view_get_page_position">
<description>
Finds the position of @page in @self, starting from 0.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab view
</parameter_description>
</parameter>
<parameter name="page">
<parameter_description> a page of @self
</parameter_description>
</parameter>
</parameters>
<return> the position of @page in @self

</return>
</function>

<function name="adw_tab_view_get_pages">
<description>
Returns a [iface@Gio.ListModel] that contains the pages of @self.

This can be used to keep an up-to-date view. The model also implements
[iface@Gtk.SelectionModel] and can be used to track and change the selected
page.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab view
</parameter_description>
</parameter>
</parameters>
<return> a `GtkSelectionModel` for the pages of @self

</return>
</function>

<function name="adw_tab_view_get_selected_page">
<description>
Gets the currently selected page in @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab view
</parameter_description>
</parameter>
</parameters>
<return> the selected page

</return>
</function>

<function name="adw_tab_view_get_shortcuts">
<description>
Gets the enabled shortcuts for @self.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab view
</parameter_description>
</parameter>
</parameters>
<return> the shortcut mask

</return>
</function>

<function name="adw_tab_view_insert">
<description>
Inserts a non-pinned page at @position.

It's an error to try to insert a page before a pinned page, in that case
[method@TabView.insert_pinned] should be used instead.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab view
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a widget to add
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the position to add @child at, starting from 0
</parameter_description>
</parameter>
</parameters>
<return> the page object representing @child

</return>
</function>

<function name="adw_tab_view_insert_pinned">
<description>
Inserts a pinned page at @position.

It's an error to try to insert a pinned page after a non-pinned page, in
that case [method@TabView.insert] should be used instead.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab view
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a widget to add
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the position to add @child at, starting from 0
</parameter_description>
</parameter>
</parameters>
<return> the page object representing @child

</return>
</function>

<function name="adw_tab_view_new">
<description>
Creates a new `AdwTabView`.

Since: 1.0

</description>
<parameters>
</parameters>
<return> the newly created `AdwTabView`

</return>
</function>

<function name="adw_tab_view_prepend">
<description>
Inserts @child as the first non-pinned page.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab view
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a widget to add
</parameter_description>
</parameter>
</parameters>
<return> the page object representing @child

</return>
</function>

<function name="adw_tab_view_prepend_pinned">
<description>
Inserts @child as the first pinned page.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab view
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a widget to add
</parameter_description>
</parameter>
</parameters>
<return> the page object representing @child

</return>
</function>

<function name="adw_tab_view_remove_shortcuts">
<description>
Removes @shortcuts from @self.

See [property@TabView:shortcuts] for details.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab view
</parameter_description>
</parameter>
<parameter name="shortcuts">
<parameter_description> the shortcuts to reomve
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_tab_view_reorder_backward">
<description>
Reorders @page to before its previous page if possible.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab view
</parameter_description>
</parameter>
<parameter name="page">
<parameter_description> a page of @self
</parameter_description>
</parameter>
</parameters>
<return> whether @page was moved

</return>
</function>

<function name="adw_tab_view_reorder_first">
<description>
Reorders @page to the first possible position.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab view
</parameter_description>
</parameter>
<parameter name="page">
<parameter_description> a page of @self
</parameter_description>
</parameter>
</parameters>
<return> whether @page was moved

</return>
</function>

<function name="adw_tab_view_reorder_forward">
<description>
Reorders @page to after its next page if possible.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab view
</parameter_description>
</parameter>
<parameter name="page">
<parameter_description> a page of @self
</parameter_description>
</parameter>
</parameters>
<return> whether @page was moved

</return>
</function>

<function name="adw_tab_view_reorder_last">
<description>
Reorders @page to the last possible position.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab view
</parameter_description>
</parameter>
<parameter name="page">
<parameter_description> a page of @self
</parameter_description>
</parameter>
</parameters>
<return> whether @page was moved

</return>
</function>

<function name="adw_tab_view_reorder_page">
<description>
Reorders @page to @position.

It's a programmer error to try to reorder a pinned page after a non-pinned
one, or a non-pinned page before a pinned one.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab view
</parameter_description>
</parameter>
<parameter name="page">
<parameter_description> a page of @self
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the position to insert the page at, starting at 0
</parameter_description>
</parameter>
</parameters>
<return> whether @page was moved

</return>
</function>

<function name="adw_tab_view_select_next_page">
<description>
Selects the page after the currently selected page.

If the last page was already selected, this function does nothing.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab view
</parameter_description>
</parameter>
</parameters>
<return> whether the selected page was changed

</return>
</function>

<function name="adw_tab_view_select_previous_page">
<description>
Selects the page before the currently selected page.

If the first page was already selected, this function does nothing.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab view
</parameter_description>
</parameter>
</parameters>
<return> whether the selected page was changed

</return>
</function>

<function name="adw_tab_view_set_default_icon">
<description>
Sets the default page icon for @self.

If a page doesn't provide its own icon via [property@TabPage:icon], a default
icon may be used instead for contexts where having an icon is necessary.

[class@TabBar] will use default icon for pinned tabs in case the page is not
loading, doesn't have an icon and an indicator. Default icon is never used
for tabs that aren't pinned.

By default, the `adw-tab-icon-missing-symbolic` icon is used.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab view
</parameter_description>
</parameter>
<parameter name="default_icon">
<parameter_description> the default icon
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_tab_view_set_menu_model">
<description>
Sets the tab context menu model for @self.

When a context menu is shown for a tab, it will be constructed from the
provided menu model. Use the [signal@TabView::setup-menu] signal to set up
the menu actions for the particular tab.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab view
</parameter_description>
</parameter>
<parameter name="menu_model">
<parameter_description> a menu model
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_tab_view_set_page_pinned">
<description>
Pins or unpins @page.

Pinned pages are guaranteed to be placed before all non-pinned pages; at any
given moment the first [property@TabView:n-pinned-pages] pages in @self are
guaranteed to be pinned.

When a page is pinned or unpinned, it's automatically reordered: pinning a
page moves it after other pinned pages; unpinning a page moves it before
other non-pinned pages.

Pinned pages can still be reordered between each other.

[class@TabBar] will display pinned pages in a compact form, never showing the
title or close button, and only showing a single icon, selected in the
following order:

1. [property@TabPage:indicator-icon]
2. A spinner if [property@TabPage:loading] is `TRUE`
3. [property@TabPage:icon]
4. [property@TabView:default-icon]

Pinned pages cannot be closed by default, see [signal@TabView::close-page]
for how to override that behavior.

Changes the value of the [property@TabPage:pinned] property.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab view
</parameter_description>
</parameter>
<parameter name="page">
<parameter_description> a page of @self
</parameter_description>
</parameter>
<parameter name="pinned">
<parameter_description> whether @page should be pinned
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_tab_view_set_selected_page">
<description>
Sets the currently selected page in @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab view
</parameter_description>
</parameter>
<parameter name="selected_page">
<parameter_description> a page in @self
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_tab_view_set_shortcuts">
<description>
Sets the enabled shortcuts for @self.

See [flags@TabViewShortcuts] for the list of the available shortcuts. All of
the shortcuts are enabled by default.

[method@TabView.add_shortcuts] and [method@TabView.remove_shortcuts] provide
a convenient way to manage individual shortcuts.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab view
</parameter_description>
</parameter>
<parameter name="shortcuts">
<parameter_description> the new shortcuts
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_tab_view_transfer_page">
<description>
Transfers @page from @self to @other_view.

The @page object will be reused.

It's a programmer error to try to insert a pinned page after a non-pinned
one, or a non-pinned page before a pinned one.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a tab view
</parameter_description>
</parameter>
<parameter name="page">
<parameter_description> a page of @self
</parameter_description>
</parameter>
<parameter name="other_view">
<parameter_description> the tab view to transfer the page to
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the position to insert the page at, starting at 0
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_timed_animation_get_alternate">
<description>
Gets whether @self changes direction on every iteration.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a timed animation
</parameter_description>
</parameter>
</parameters>
<return> whether @self alternates

</return>
</function>

<function name="adw_timed_animation_get_duration">
<description>
Gets the duration of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a timed animation
</parameter_description>
</parameter>
</parameters>
<return> the duration of @self, in milliseconds

</return>
</function>

<function name="adw_timed_animation_get_easing">
<description>
Gets the easing function @self uses.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a timed animation
</parameter_description>
</parameter>
</parameters>
<return> the easing function @self uses

</return>
</function>

<function name="adw_timed_animation_get_repeat_count">
<description>
Gets the number of times @self will play.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a timed animation
</parameter_description>
</parameter>
</parameters>
<return> the number of times @self will play

</return>
</function>

<function name="adw_timed_animation_get_reverse">
<description>
Gets whether @self plays backwards.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a timed animation
</parameter_description>
</parameter>
</parameters>
<return> whether @self plays backwards

</return>
</function>

<function name="adw_timed_animation_get_value_from">
<description>
Gets the value @self will animate from.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a timed animation
</parameter_description>
</parameter>
</parameters>
<return> the value to animate from

</return>
</function>

<function name="adw_timed_animation_get_value_to">
<description>
Gets the value @self will animate to.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a timed animation
</parameter_description>
</parameter>
</parameters>
<return> the value to animate to

</return>
</function>

<function name="adw_timed_animation_new">
<description>
Creates a new `AdwTimedAnimation` on @widget to animate @target from @from
to @to.

Since: 1.0

</description>
<parameters>
<parameter name="widget">
<parameter_description> a widget to create animation on
</parameter_description>
</parameter>
<parameter name="from">
<parameter_description> a value to animate from
</parameter_description>
</parameter>
<parameter name="to">
<parameter_description> a value to animate to
</parameter_description>
</parameter>
<parameter name="duration">
<parameter_description> a duration for the animation
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> a target value to animate
</parameter_description>
</parameter>
</parameters>
<return> the newly created animation

</return>
</function>

<function name="adw_timed_animation_set_alternate">
<description>
Sets whether @self changes direction on every iteration.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a timed animation
</parameter_description>
</parameter>
<parameter name="alternate">
<parameter_description> whether @self alternates
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_timed_animation_set_duration">
<description>
Sets the duration of @self.

If the animation repeats more than once, sets the duration of one iteration.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a timed animation
</parameter_description>
</parameter>
<parameter name="duration">
<parameter_description> the duration to use, in milliseconds
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_timed_animation_set_easing">
<description>
Sets the easing function @self will use.

See [enum@Easing] for the description of specific easing functions.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a timed animation
</parameter_description>
</parameter>
<parameter name="easing">
<parameter_description> the easing function to use
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_timed_animation_set_repeat_count">
<description>
Sets the number of times @self will play.

If set to 0, @self will repeat endlessly.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a timed animation
</parameter_description>
</parameter>
<parameter name="repeat_count">
<parameter_description> the number of times @self will play
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_timed_animation_set_reverse">
<description>
Sets whether @self plays backwards.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a timed animation
</parameter_description>
</parameter>
<parameter name="reverse">
<parameter_description> whether @self plays backwards
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_timed_animation_set_value_from">
<description>
Sets the value @self will animate from.

The animation will start at this value and end at
[property@TimedAnimation:value-to].

If [property@TimedAnimation:reverse] is `TRUE`, the animation will end at
this value instead.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a timed animation
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value to animate from
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_timed_animation_set_value_to">
<description>
Sets the value @self will animate to.

The animation will start at [property@TimedAnimation:value-from] and end at
this value.

If [property@TimedAnimation:reverse] is `TRUE`, the animation will start
at this value instead.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a timed animation
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value to animate to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_toast_dismiss">
<description>
Dismisses @self.

Does nothing if @self has already been dismissed, or hasn't been added to an
[class@ToastOverlay].

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a toast
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_toast_get_action_name">
<description>
Gets the name of the associated action.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a toast
</parameter_description>
</parameter>
</parameters>
<return> the action name

</return>
</function>

<function name="adw_toast_get_action_target_value">
<description>
Gets the parameter for action invocations.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a toast
</parameter_description>
</parameter>
</parameters>
<return> the action target

</return>
</function>

<function name="adw_toast_get_button_label">
<description>
Gets the label to show on the button.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a toast
</parameter_description>
</parameter>
</parameters>
<return> the button label

</return>
</function>

<function name="adw_toast_get_custom_title">
<description>
Gets the custom title widget of @self.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a toast
</parameter_description>
</parameter>
</parameters>
<return> the custom title widget

</return>
</function>

<function name="adw_toast_get_priority">
<description>
Gets priority for @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a toast
</parameter_description>
</parameter>
</parameters>
<return> the priority

</return>
</function>

<function name="adw_toast_get_timeout">
<description>
Gets timeout for @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a toast
</parameter_description>
</parameter>
</parameters>
<return> the timeout

</return>
</function>

<function name="adw_toast_get_title">
<description>
Gets the title that will be displayed on the toast.

If a custom title has been set with [method@Adw.Toast.set_custom_title]
the return value will be %NULL.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a toast
</parameter_description>
</parameter>
</parameters>
<return> the title

</return>
</function>

<function name="adw_toast_new">
<description>
Creates a new `AdwToast`.

The toast will use @title as its title.

@title can be marked up with the Pango text markup language.

Since: 1.0

</description>
<parameters>
<parameter name="title">
<parameter_description> the title to be displayed
</parameter_description>
</parameter>
</parameters>
<return> the new created `AdwToast`

</return>
</function>

<function name="adw_toast_new_format">
<description>
Creates a new `AdwToast`.

The toast will use the format string as its title.

See also: [ctor@Toast.new]

Since: 1.2

</description>
<parameters>
<parameter name="format">
<parameter_description> the formatted string for the toast title
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> the parameters to insert into the format string
</parameter_description>
</parameter>
</parameters>
<return> the newly created toast object

</return>
</function>

<function name="adw_toast_overlay_add_toast">
<description>
Displays @toast.

Only one toast can be shown at a time; if a toast is already being displayed,
either @toast or the original toast will be placed in a queue, depending on
the priority of @toast. See [property@Toast:priority].

If called on a toast that's already displayed, its timeout will be reset.

If called on a toast currently in the queue, the toast will be bumped
forward to be shown as soon as possible.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a toast overlay
</parameter_description>
</parameter>
<parameter name="toast">
<parameter_description> a toast
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_toast_overlay_get_child">
<description>
Gets the child widget of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a toast overlay
</parameter_description>
</parameter>
</parameters>
<return> the child widget of @self

</return>
</function>

<function name="adw_toast_overlay_new">
<description>
Creates a new `AdwToastOverlay`.

Since: 1.0

</description>
<parameters>
</parameters>
<return> the new created `AdwToastOverlay`

</return>
</function>

<function name="adw_toast_overlay_set_child">
<description>
Sets the child widget of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a toast overlay
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the child widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_toast_set_action_name">
<description>
Sets the name of the associated action.

It will be activated when clicking the button.

See [property@Toast:action-target].

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a toast
</parameter_description>
</parameter>
<parameter name="action_name">
<parameter_description> the action name
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_toast_set_action_target">
<description>
Sets the parameter for action invocations.

This is a convenience function that calls [ctor@GLib.Variant.new] for
@format_string and uses the result to call
[method@Toast.set_action_target_value].

If you are setting a string-valued target and want to set
the action name at the same time, you can use
[method@Toast.set_detailed_action_name].

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a toast
</parameter_description>
</parameter>
<parameter name="format_string">
<parameter_description> a variant format string
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> arguments appropriate for @target_format
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_toast_set_action_target_value">
<description>
Sets the parameter for action invocations.

If the @action_target variant has a floating reference this function
will sink it.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a toast
</parameter_description>
</parameter>
<parameter name="action_target">
<parameter_description> the action target
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_toast_set_button_label">
<description>
Sets the label to show on the button.

Underlines in the button text can be used to indicate a mnemonic.

If set to `NULL`, the button won't be shown.

See [property@Toast:action-name].

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a toast
</parameter_description>
</parameter>
<parameter name="button_label">
<parameter_description> a button label
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_toast_set_custom_title">
<description>
Sets the custom title widget of @self.

It will be displayed instead of the title if set. In this case,
[property@Toast:title] is ignored.

Setting a custom title will unset [property@Toast:title].

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a toast
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> the custom title widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_toast_set_detailed_action_name">
<description>
Sets the action name and its parameter.

@detailed_action_name is a string in the format accepted by
[func@Gio.Action.parse_detailed_name].

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a toast
</parameter_description>
</parameter>
<parameter name="detailed_action_name">
<parameter_description> the detailed action name
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_toast_set_priority">
<description>
Sets priority for @self.

Priority controls how the toast behaves when another toast is already
being displayed.

If @priority is `ADW_TOAST_PRIORITY_NORMAL`, the toast will be queued.

If @priority is `ADW_TOAST_PRIORITY_HIGH`, the toast will be displayed
immediately, pushing the previous toast into the queue instead.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a toast
</parameter_description>
</parameter>
<parameter name="priority">
<parameter_description> the priority
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_toast_set_timeout">
<description>
Sets timeout for @self.

If @timeout is 0, the toast is displayed indefinitely until manually
dismissed.

Toasts cannot disappear while being hovered, pressed (on touchscreen), or
have keyboard focus inside them.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a toast
</parameter_description>
</parameter>
<parameter name="timeout">
<parameter_description> the timeout
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_toast_set_title">
<description>
Sets the title that will be displayed on the toast.

The title can be marked up with the Pango text markup language.

Setting a title will unset [property@Toast:custom-title].

If [property@Toast:custom-title] is set, it will be used instead.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a toast
</parameter_description>
</parameter>
<parameter name="title">
<parameter_description> a title
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_view_stack_add">
<description>
Adds a child to @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view stack
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the widget to add
</parameter_description>
</parameter>
</parameters>
<return> the [class@ViewStackPage] for @child

</return>
</function>

<function name="adw_view_stack_add_named">
<description>
Adds a child to @self.

The child is identified by the @name.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view stack
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the widget to add
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name for @child
</parameter_description>
</parameter>
</parameters>
<return> the `AdwViewStackPage` for @child

</return>
</function>

<function name="adw_view_stack_add_titled">
<description>
Adds a child to @self.

The child is identified by the @name. The @title will be used by
[class@ViewSwitcher] to represent @child, so it should be short.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view stack
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the widget to add
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name for @child
</parameter_description>
</parameter>
<parameter name="title">
<parameter_description> a human-readable title for @child
</parameter_description>
</parameter>
</parameters>
<return> the `AdwViewStackPage` for @child

</return>
</function>

<function name="adw_view_stack_add_titled_with_icon">
<description>
Adds a child to @self.

The child is identified by the @name. The @title and @icon_name will be used
by [class@ViewSwitcher] to represent @child.

Since: 1.2

</description>
<parameters>
<parameter name="self">
<parameter_description> a view stack
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the widget to add
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name for @child
</parameter_description>
</parameter>
<parameter name="title">
<parameter_description> a human-readable title for @child
</parameter_description>
</parameter>
<parameter name="icon_name">
<parameter_description> an icon name for @child
</parameter_description>
</parameter>
</parameters>
<return> the `AdwViewStackPage` for @child

</return>
</function>

<function name="adw_view_stack_get_child_by_name">
<description>
Finds the child with @name in @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view stack
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the child to find
</parameter_description>
</parameter>
</parameters>
<return> the requested child

</return>
</function>

<function name="adw_view_stack_get_hhomogeneous">
<description>
Gets whether @self is horizontally homogeneous.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view stack
</parameter_description>
</parameter>
</parameters>
<return> whether @self is horizontally homogeneous

</return>
</function>

<function name="adw_view_stack_get_page">
<description>
Gets the [class@ViewStackPage] object for @child.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view stack
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a child of @self
</parameter_description>
</parameter>
</parameters>
<return> the page object for @child

</return>
</function>

<function name="adw_view_stack_get_pages">
<description>
Returns a [iface@Gio.ListModel] that contains the pages of the stack.

This can be used to keep an up-to-date view. The model also implements
[iface@Gtk.SelectionModel] and can be used to track and change the visible
page.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view stack
</parameter_description>
</parameter>
</parameters>
<return> a `GtkSelectionModel` for the stack's children

</return>
</function>

<function name="adw_view_stack_get_vhomogeneous">
<description>
Gets whether @self is vertically homogeneous.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view stack
</parameter_description>
</parameter>
</parameters>
<return> whether @self is vertically homogeneous

</return>
</function>

<function name="adw_view_stack_get_visible_child">
<description>
Gets the currently visible child of @self, .

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view stack
</parameter_description>
</parameter>
</parameters>
<return> the visible child

</return>
</function>

<function name="adw_view_stack_get_visible_child_name">
<description>
Returns the name of the currently visible child of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view stack
</parameter_description>
</parameter>
</parameters>
<return> the name of the visible child

</return>
</function>

<function name="adw_view_stack_new">
<description>
Creates a new `AdwViewStack`.

Since: 1.0

</description>
<parameters>
</parameters>
<return> the newly created `AdwViewStack`

</return>
</function>

<function name="adw_view_stack_page_get_badge_number">
<description>
Gets the badge number for this page.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view stack page
</parameter_description>
</parameter>
</parameters>
<return> the badge number for this page

</return>
</function>

<function name="adw_view_stack_page_get_child">
<description>
Gets the stack child to which @self belongs.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view stack page
</parameter_description>
</parameter>
</parameters>
<return> the child to which @self belongs

</return>
</function>

<function name="adw_view_stack_page_get_icon_name">
<description>
Gets the icon name of the page.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view stack page
</parameter_description>
</parameter>
</parameters>
<return> the icon name of the page

</return>
</function>

<function name="adw_view_stack_page_get_name">
<description>
Gets the name of the page.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view stack page
</parameter_description>
</parameter>
</parameters>
<return> the name of the page

</return>
</function>

<function name="adw_view_stack_page_get_needs_attention">
<description>
Gets whether the page requires the user attention.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view stack page
</parameter_description>
</parameter>
</parameters>
<return> whether the page needs attention

</return>
</function>

<function name="adw_view_stack_page_get_title">
<description>
Gets the page title.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view stack page
</parameter_description>
</parameter>
</parameters>
<return> the page title

</return>
</function>

<function name="adw_view_stack_page_get_use_underline">
<description>
Gets whether underlines in the page title indicate mnemonics.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view stack page
</parameter_description>
</parameter>
</parameters>
<return> whether underlines in the page title indicate mnemonics

</return>
</function>

<function name="adw_view_stack_page_get_visible">
<description>
Gets whether @self is visible in its `AdwViewStack`.

This is independent from the [property@Gtk.Widget:visible]
property of its widget.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view stack page
</parameter_description>
</parameter>
</parameters>
<return> whether @self is visible

</return>
</function>

<function name="adw_view_stack_page_set_badge_number">
<description>
Sets the badge number for this page.

[class@ViewSwitcher] can display it as a badge next to the page icon. It is
commonly used to display a number of unread items within the page.

It can be used together with [property@ViewStack{age}:needs-attention].

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view stack page
</parameter_description>
</parameter>
<parameter name="badge_number">
<parameter_description> the new value to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_view_stack_page_set_icon_name">
<description>
Sets the icon name of the page.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view stack page
</parameter_description>
</parameter>
<parameter name="icon_name">
<parameter_description> the icon name
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_view_stack_page_set_name">
<description>
Sets the name of the page.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view stack page
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the page name
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_view_stack_page_set_needs_attention">
<description>
Sets whether the page requires the user attention.

[class@ViewSwitcher] will display it as a dot next to the page icon.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view stack page
</parameter_description>
</parameter>
<parameter name="needs_attention">
<parameter_description> the new value to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_view_stack_page_set_title">
<description>
Sets the page title.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view stack page
</parameter_description>
</parameter>
<parameter name="title">
<parameter_description> the page title
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_view_stack_page_set_use_underline">
<description>
Sets whether underlines in the page title indicate mnemonics.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view stack page
</parameter_description>
</parameter>
<parameter name="use_underline">
<parameter_description> the new value to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_view_stack_page_set_visible">
<description>
Sets whether @page is visible in its `AdwViewStack`.

This is independent from the [property@Gtk.Widget:visible] property of
[property@ViewStackPage:child].

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view stack page
</parameter_description>
</parameter>
<parameter name="visible">
<parameter_description> whether @self is visible
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_view_stack_remove">
<description>
Removes a child widget from @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view stack
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the child to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_view_stack_set_hhomogeneous">
<description>
Sets @self to be horizontally homogeneous or not.

If the stack is horizontally homogeneous, it allocates the same width for
all children.

If it's `FALSE`, the stack may change width when a different child becomes
visible.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view stack
</parameter_description>
</parameter>
<parameter name="hhomogeneous">
<parameter_description> whether to make @self horizontally homogeneous
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_view_stack_set_vhomogeneous">
<description>
Sets @self to be vertically homogeneous or not.

If the stack is vertically homogeneous, it allocates the same height for
all children.

If it's `FALSE`, the stack may change height when a different child becomes
visible.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view stack
</parameter_description>
</parameter>
<parameter name="vhomogeneous">
<parameter_description> whether to make @self vertically homogeneous
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_view_stack_set_visible_child">
<description>
Makes @child the visible child of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view stack
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a child of @self
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_view_stack_set_visible_child_name">
<description>
Makes the child with @name visible.

See [property@ViewStack:visible-child].

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view stack
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the child
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_view_switcher_bar_get_reveal">
<description>
Gets whether @self should be revealed or hidden.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view switcher bar
</parameter_description>
</parameter>
</parameters>
<return> whether @self is revealed

</return>
</function>

<function name="adw_view_switcher_bar_get_stack">
<description>
Gets the stack controlled by @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view switcher bar
</parameter_description>
</parameter>
</parameters>
<return> the stack

</return>
</function>

<function name="adw_view_switcher_bar_new">
<description>
Creates a new `AdwViewSwitcherBar`.

Since: 1.0

</description>
<parameters>
</parameters>
<return> the newly created `AdwViewSwitcherBar`

</return>
</function>

<function name="adw_view_switcher_bar_set_reveal">
<description>
Sets whether @self should be revealed or hidden.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view switcher bar
</parameter_description>
</parameter>
<parameter name="reveal">
<parameter_description> whether to reveal @self
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_view_switcher_bar_set_stack">
<description>
Sets the stack controlled by @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view switcher bar
</parameter_description>
</parameter>
<parameter name="stack">
<parameter_description> a stack
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_view_switcher_button_get_badge_number">
<description>
Gets the badge number.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view switcher button
</parameter_description>
</parameter>
</parameters>
<return> the badge number

</return>
</function>

<function name="adw_view_switcher_button_get_icon_name">
<description>
Gets the icon name representing the view.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view switcher button
</parameter_description>
</parameter>
</parameters>
<return> the icon name

</return>
</function>

<function name="adw_view_switcher_button_get_label">
<description>
Gets the label representing the view.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view switcher button
</parameter_description>
</parameter>
</parameters>
<return> the label

</return>
</function>

<function name="adw_view_switcher_button_get_needs_attention">
<description>
Gets whether the view represented by @self requires the user attention.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view switcher button
</parameter_description>
</parameter>
</parameters>
<return> whether the view requires the user attention

</return>
</function>

<function name="adw_view_switcher_button_new">
<description>
Creates a new `AdwViewSwitcherButton`.

Since: 1.0

</description>
<parameters>
</parameters>
<return> the newly created `AdwViewSwitcherButton`

</return>
</function>

<function name="adw_view_switcher_button_set_badge_number">
<description>
Sets the badge number.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view switcher button
</parameter_description>
</parameter>
<parameter name="badge_number">
<parameter_description> the new value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_view_switcher_button_set_icon_name">
<description>
Sets the icon name representing the view.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view switcher button
</parameter_description>
</parameter>
<parameter name="icon_name">
<parameter_description> an icon name
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_view_switcher_button_set_label">
<description>
Sets the label representing the view.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view switcher button
</parameter_description>
</parameter>
<parameter name="label">
<parameter_description> a label
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_view_switcher_button_set_needs_attention">
<description>
Sets whether the view represented by @self requires the user attention.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view switcher button
</parameter_description>
</parameter>
<parameter name="needs_attention">
<parameter_description> whether the view needs attention
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_view_switcher_get_policy">
<description>
Gets the policy of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view switcher
</parameter_description>
</parameter>
</parameters>
<return> the policy of @self

</return>
</function>

<function name="adw_view_switcher_get_stack">
<description>
Gets the stack controlled by @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view switcher
</parameter_description>
</parameter>
</parameters>
<return> the stack

</return>
</function>

<function name="adw_view_switcher_new">
<description>
Creates a new `AdwViewSwitcher`.

Since: 1.0

</description>
<parameters>
</parameters>
<return> the newly created `AdwViewSwitcher`

</return>
</function>

<function name="adw_view_switcher_set_policy">
<description>
Sets the policy of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view switcher
</parameter_description>
</parameter>
<parameter name="policy">
<parameter_description> the new policy
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_view_switcher_set_stack">
<description>
Sets the stack controlled by @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view switcher
</parameter_description>
</parameter>
<parameter name="stack">
<parameter_description> a stack
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_view_switcher_title_get_stack">
<description>
Gets the stack controlled by @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view switcher title
</parameter_description>
</parameter>
</parameters>
<return> the stack

</return>
</function>

<function name="adw_view_switcher_title_get_subtitle">
<description>
Gets the subtitle of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view switcher title
</parameter_description>
</parameter>
</parameters>
<return> the subtitle

</return>
</function>

<function name="adw_view_switcher_title_get_title">
<description>
Gets the title of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view switcher title
</parameter_description>
</parameter>
</parameters>
<return> the title

</return>
</function>

<function name="adw_view_switcher_title_get_title_visible">
<description>
Gets whether the title of @self is currently visible.

If the title is visible, it means the view switcher is hidden an it may be
wanted to show an alternative switcher, e.g. a [class@ViewSwitcherBar].

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view switcher title
</parameter_description>
</parameter>
</parameters>
<return> whether the title of @self is currently visible

</return>
</function>

<function name="adw_view_switcher_title_get_view_switcher_enabled">
<description>
Gets whether @self's view switcher is enabled.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view switcher title
</parameter_description>
</parameter>
</parameters>
<return> whether the view switcher is enabled

</return>
</function>

<function name="adw_view_switcher_title_new">
<description>
Creates a new `AdwViewSwitcherTitle`.

Since: 1.0

</description>
<parameters>
</parameters>
<return> the newly created `AdwViewSwitcherTitle`

</return>
</function>

<function name="adw_view_switcher_title_set_stack">
<description>
Sets the stack controlled by @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view switcher title
</parameter_description>
</parameter>
<parameter name="stack">
<parameter_description> a stack
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_view_switcher_title_set_subtitle">
<description>
Sets the subtitle of @self.

The subtitle should give the user additional details.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view switcher title
</parameter_description>
</parameter>
<parameter name="subtitle">
<parameter_description> a subtitle
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_view_switcher_title_set_title">
<description>
Sets the title of @self.

The title typically identifies the current view or content item, and
generally does not use the application name.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view switcher title
</parameter_description>
</parameter>
<parameter name="title">
<parameter_description> a title
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_view_switcher_title_set_view_switcher_enabled">
<description>
Sets whether @self's view switcher is enabled.

If it is disabled, the title will be displayed instead. This allows to
programmatically hide the view switcher even if it fits in the available
space.

This can be used e.g. to ensure the view switcher is hidden below a certain
window width, or any other constraint you find suitable.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a view switcher title
</parameter_description>
</parameter>
<parameter name="enabled">
<parameter_description> whether the view switcher is enabled
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_window_get_content">
<description>
Gets the content widget of @self.

This method should always be used instead of [method@Gtk.Window.get_child].

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a window
</parameter_description>
</parameter>
</parameters>
<return> the content widget of @self

</return>
</function>

<function name="adw_window_new">
<description>
Creates a new `AdwWindow`.

Since: 1.0

</description>
<parameters>
</parameters>
<return> the newly created `AdwWindow`

</return>
</function>

<function name="adw_window_set_content">
<description>
Sets the content widget of @self.

This method should always be used instead of [method@Gtk.Window.set_child].

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a window
</parameter_description>
</parameter>
<parameter name="content">
<parameter_description> the content widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_window_title_get_subtitle">
<description>
Gets the subtitle of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a window title
</parameter_description>
</parameter>
</parameters>
<return> the subtitle

</return>
</function>

<function name="adw_window_title_get_title">
<description>
Gets the title of @self.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a window title
</parameter_description>
</parameter>
</parameters>
<return> the title

</return>
</function>

<function name="adw_window_title_new">
<description>
Creates a new `AdwWindowTitle`.

Since: 1.0

</description>
<parameters>
<parameter name="title">
<parameter_description> a title
</parameter_description>
</parameter>
<parameter name="subtitle">
<parameter_description> a subtitle
</parameter_description>
</parameter>
</parameters>
<return> the newly created `AdwWindowTitle`

</return>
</function>

<function name="adw_window_title_set_subtitle">
<description>
Sets the subtitle of @self.

The subtitle should give the user additional details.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a window title
</parameter_description>
</parameter>
<parameter name="subtitle">
<parameter_description> a subtitle
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="adw_window_title_set_title">
<description>
Sets the title of @self.

The title typically identifies the current view or content item, and
generally does not use the application name.

Since: 1.0

</description>
<parameters>
<parameter name="self">
<parameter_description> a window title
</parameter_description>
</parameter>
<parameter name="title">
<parameter_description> a title
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

</root>
