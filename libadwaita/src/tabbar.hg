/* Copyright (c) 2019  Roger Ferrer <rofirrim@gmail.com>
 *
 * This file is part of libadwaitamm.
 *
 * libadwaitamm is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 2.1 of the License,
 * or (at your option) any later version.
 *
 * libadwaitamm is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

_DEFS(libadwaitamm,libadwaita)
_CONFIGINCLUDE(libadwaitammconfig.h)
_PINCLUDE(gtkmm/private/widget_p.h)

#include <gtkmm.h>

// The documentation explicitly advises against this.
// But G_DECLARE_FINAL_TYPE seems to do struct { ... } Foo; which means we
// cannot forward-declare a struct type Foo.
#include <libadwaitamm/tabview.h>
#include <libadwaita-1/adwaita.h>

namespace Adw
{

class TabBar : public Gtk::Widget {
  _CLASS_GTKOBJECT(TabBar, AdwTabBar, ADW_TAB_BAR, Gtk::Widget, GtkWidget)
  _STRUCT_NOT_HIDDEN
  _DO_NOT_DERIVE_GTYPE

protected:
  _CTOR_DEFAULT

public:
  _WRAP_CREATE()

  _WRAP_METHOD(bool get_autohide() const, adw_tab_bar_get_autohide)
  _WRAP_METHOD(Gtk::Widget* get_end_action_widget() const, adw_tab_bar_get_end_action_widget)
  _WRAP_METHOD(bool get_expand_tabs() const, adw_tab_bar_get_expand_tabs)
  _WRAP_METHOD(bool get_inverted() const, adw_tab_bar_get_inverted)
  _WRAP_METHOD(bool get_is_overflowing() const, adw_tab_bar_get_is_overflowing)
  _WRAP_METHOD(Gtk::Widget* get_start_action_widget() const, adw_tab_bar_get_start_action_widget)
  _WRAP_METHOD(bool get_tabs_revealed() const, adw_tab_bar_get_tabs_revealed)
  _WRAP_METHOD(TabView* get_view() const, adw_tab_bar_get_view)
  _WRAP_METHOD(void set_autohide(bool autohide), adw_tab_bar_set_autohide)
  _WRAP_METHOD(void set_end_action_widget(Gtk::Widget *widget), adw_tab_bar_set_end_action_widget)
  _WRAP_METHOD(void set_expand_tabs(bool expand_tabs), adw_tab_bar_set_expand_tabs)
  _WRAP_METHOD(void set_inverted(bool inverted), adw_tab_bar_set_inverted)
  _WRAP_METHOD(void set_start_action_widget(Gtk::Widget *widget), adw_tab_bar_set_start_action_widget)
  _WRAP_METHOD(void set_view(TabView* view), adw_tab_bar_set_view)

  _IGNORE(adw_tab_bar_setup_extra_drop_target)
  void setup_extra_drop_target(Gdk::DragAction actions,
                               const std::vector<GType> types) {
    adw_tab_bar_setup_extra_drop_target(
        const_cast<AdwTabBar *>(gobj()), static_cast<GdkDragAction>(actions),
        Glib::ArrayHandler<GType>::vector_to_array(types).data(), types.size());
  }

  _WRAP_PROPERTY("autohide", bool)
  _WRAP_PROPERTY("end-action-widget", Gtk::Widget*)
  _WRAP_PROPERTY("expand-tabs", bool)
  _WRAP_PROPERTY("inverted", bool)
  _WRAP_PROPERTY("is-overflowing", bool)
  _WRAP_PROPERTY("start-action-widget", Gtk::Widget*)
  _WRAP_PROPERTY("tabs-revealed", bool)
  _WRAP_PROPERTY("view", TabView*)

  _WRAP_SIGNAL(bool extra_drag_drop(const Glib::RefPtr<TabPage>& page, Glib::ValueBase& value), "extra-drag-drop", no_default_handler)
};

} // namespace Adw
