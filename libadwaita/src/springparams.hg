/* Copyright (c) 2019  Roger Ferrer <rofirrim@gmail.com>
 *
 * This file is part of libadwaitamm.
 *
 * libadwaitamm is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 2.1 of the License,
 * or (at your option) any later version.
 *
 * libadwaitamm is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

_DEFS(libadwaitamm,libadwaita)
_CONFIGINCLUDE(libadwaitammconfig.h)
_PINCLUDE(gtkmm/private/widget_p.h)

#include <gtkmm.h>

// The documentation explicitly advises against this.
// But G_DECLARE_FINAL_TYPE seems to do struct { ... } Foo; which means we
// cannot forward-declare a struct type Foo.
#include <libadwaita-1/adwaita.h>

namespace Adw
{

struct DampingRatio {
    double damping_ratio;
};
_CONVERSION(`DampingRatio',`double',`$3.damping_ratio')

struct Damping{
    double damping;
};
_CONVERSION(`Damping',`double',`$3.damping')

class SpringParams {
_CLASS_OPAQUE_REFCOUNTED(SpringParams, AdwSpringParams, NONE, adw_spring_params_ref, adw_spring_params_unref)

public:

 _WRAP_METHOD(static Glib::RefPtr<SpringParams> create(DampingRatio damping_ratio, double mass, double stiffness), adw_spring_params_new)
 _WRAP_METHOD(static Glib::RefPtr<SpringParams> create(Damping damping, double mass, double stiffness), adw_spring_params_new_full)

 _WRAP_METHOD(double get_damping() const, adw_spring_params_get_damping)
 _WRAP_METHOD(double get_damping_ratio() const, adw_spring_params_get_damping_ratio)
 _WRAP_METHOD(double get_mass() const, adw_spring_params_get_mass)
 _WRAP_METHOD(double get_stiffness() const, adw_spring_params_get_stiffness)

 _IGNORE(adw_spring_params_ref)
 _IGNORE(adw_spring_params_unref)

};

} // namespace Adw
