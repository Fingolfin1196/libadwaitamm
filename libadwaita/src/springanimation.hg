/* Copyright (c) 2019  Roger Ferrer <rofirrim@gmail.com>
 *
 * This file is part of libadwaitamm.
 *
 * libadwaitamm is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 2.1 of the License,
 * or (at your option) any later version.
 *
 * libadwaitamm is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

_DEFS(libadwaitamm,libadwaita)
_CONFIGINCLUDE(libadwaitammconfig.h)
_PINCLUDE(libadwaitamm/private/animation_p.h)

#include <glibmm.h>
#include <gtkmm.h>
#include <libadwaitamm/animation.h>
#include <libadwaitamm/springparams.h>
#include <libadwaita-1/adwaita.h>

namespace Adw
{

class SpringAnimation : public Animation {
  _CLASS_GOBJECT(SpringAnimation, AdwSpringAnimation, ADW_SPRING_ANIMATION, Animation, AdwAnimation)
  _WRAP_CTOR(SpringAnimation(Gtk::Widget* widget, double from, double to, const Glib::RefPtr<SpringParams>& spring_params, const Glib::RefPtr<AnimationTarget>& target), adw_spring_animation_new)

protected:
  _CTOR_DEFAULT

public:
  _WRAP_CREATE(Gtk::Widget* widget, double from, double to, const Glib::RefPtr<SpringParams>& spring_params, const Glib::RefPtr<AnimationTarget>& target)

  _WRAP_METHOD(bool get_clamp() const, adw_spring_animation_get_clamp)
  _WRAP_METHOD(double get_epsilon() const, adw_spring_animation_get_epsilon)
  _WRAP_METHOD(unsigned int get_estimated_duration() const, adw_spring_animation_get_estimated_duration)
  _WRAP_METHOD(double get_initial_velocity() const, adw_spring_animation_get_initial_velocity)
  _WRAP_METHOD(Glib::RefPtr<SpringParams> get_spring_params() const, adw_spring_animation_get_spring_params)
  _WRAP_METHOD(double get_value_from() const, adw_spring_animation_get_value_from)
  _WRAP_METHOD(double get_value_to() const, adw_spring_animation_get_value_to)
  _WRAP_METHOD(double get_velocity() const, adw_spring_animation_get_velocity)
  _WRAP_METHOD(void set_clamp(bool clamp), adw_spring_animation_set_clamp)
  _WRAP_METHOD(void set_epsilon(double epsilon), adw_spring_animation_set_epsilon)
  _WRAP_METHOD(void set_initial_velocity(double velocity), adw_spring_animation_set_initial_velocity)
  _WRAP_METHOD(void set_spring_params(const Glib::RefPtr<SpringParams>& spring_params), adw_spring_animation_set_spring_params)
  _WRAP_METHOD(void set_value_from(double epsilon), adw_spring_animation_set_value_from)
  _WRAP_METHOD(void set_value_to(double epsilon), adw_spring_animation_set_value_to)

  _WRAP_PROPERTY("clamp", bool)
  _WRAP_PROPERTY("epsilon", double)
  _WRAP_PROPERTY("estimated-duration", unsigned int)
  _WRAP_PROPERTY("initial-velocity", double)
  _WRAP_PROPERTY("spring-params", Glib::RefPtr<SpringParams>)
  _WRAP_PROPERTY("value-from", double)
  _WRAP_PROPERTY("value-to", double)
  _WRAP_PROPERTY("velocity", double)
};

} // namespace Adw
