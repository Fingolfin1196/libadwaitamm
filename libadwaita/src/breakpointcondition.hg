/* Copyright (c) 2024 Kurt BÃ¶hm <kurbo96@gmail.com>
 *
 * This file is part of libadwaitamm.
 *
 * libadwaitamm is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 2.1 of the License,
 * or (at your option) any later version.
 *
 * libadwaitamm is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

_DEFS(libadwaitamm,libadwaita)
_CONFIGINCLUDE(libadwaitammconfig.h)
_PINCLUDE(gtkmm/private/widget_p.h)

#include <gtkmm.h>

// The documentation explicitly advises against this.
// But G_DECLARE_FINAL_TYPE seems to do struct { ... } Foo; which means we
// cannot forward-declare a struct type Foo.
#include <libadwaita-1/adwaita.h>

namespace Adw
{

class BreakpointCondition {
  _CLASS_BOXEDTYPE(BreakpointCondition, AdwBreakpointCondition, NONE, adw_breakpoint_condition_copy, adw_breakpoint_condition_free)
  _IGNORE(adw_breakpoint_condition_copy, adw_breakpoint_condition_free)

public:
  _WRAP_ENUM(LengthType, AdwBreakpointConditionLengthType)
  _WRAP_ENUM(RatioType, AdwBreakpointConditionRatioType)

#m4 _CONVERSION(`BreakpointCondition',`AdwBreakpointCondition*',`($3).gobj()')
#m4 _CONVERSION(`AdwBreakpointCondition*',`BreakpointCondition',`Glib::wrap($3, true)')

  _WRAP_METHOD(static BreakpointCondition create_and(BreakpointCondition condition_1, BreakpointCondition condition_2), adw_breakpoint_condition_new_and)
  _WRAP_METHOD(static BreakpointCondition create_length(LengthType type, double value, AdwLengthUnit unit), adw_breakpoint_condition_new_length)
  _WRAP_METHOD(static BreakpointCondition create_or(BreakpointCondition condition_1, BreakpointCondition condition_2), adw_breakpoint_condition_new_or)
  _WRAP_METHOD(static BreakpointCondition create_ratio(RatioType type, int width, int height), adw_breakpoint_condition_new_ratio)
  _WRAP_METHOD(static BreakpointCondition parse(const Glib::ustring& str), adw_breakpoint_condition_parse)

  _WRAP_METHOD(Glib::ustring to_string() const, adw_breakpoint_condition_to_string)
};

} // namespace Adw
