/* Copyright (c) 2024 Kurt BÃ¶hm <kurbo96@gmail.com>
 *
 * This file is part of libadwaitamm.
 *
 * libadwaitamm is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 2.1 of the License,
 * or (at your option) any later version.
 *
 * libadwaitamm is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

_DEFS(libadwaitamm,libadwaita)
_CONFIGINCLUDE(libadwaitammconfig.h)
_PINCLUDE(gtkmm/private/widget_p.h)

#include <gtkmm.h>

// The documentation explicitly advises against this.
// But G_DECLARE_FINAL_TYPE seems to do struct { ... } Foo; which means we
// cannot forward-declare a struct type Foo.
#include <libadwaita-1/adwaita.h>
#include <libadwaitamm/breakpointcondition.h>

namespace Adw
{

class Breakpoint : public Glib::Object {
  _CLASS_GOBJECT(Breakpoint, AdwBreakpoint, ADW_BREAKPOINT, Glib::Object, GObject)
  _STRUCT_NOT_HIDDEN
  _UNMANAGEABLE
  _DO_NOT_DERIVE_GTYPE
  _NO_WRAP_FUNCTION

protected:
  _CTOR_DEFAULT
  _WRAP_CTOR(Breakpoint(BreakpointCondition condition), adw_breakpoint_new)

public:
  _WRAP_CREATE(BreakpointCondition condition)

  _IGNORE(adw_breakpoint_add_setters_valist)
  _IGNORE(adw_breakpoint_add_setters)
  // TODO Add?
  _IGNORE(adw_breakpoint_add_settersv)

  _WRAP_METHOD(void add_setter(Glib::Object& obj, const Glib::ustring& property, const Glib::ValueBase& value), adw_breakpoint_add_setter)
  _WRAP_METHOD(BreakpointCondition get_condition() const, adw_breakpoint_get_condition)
  _WRAP_METHOD(void set_condition(BreakpointCondition& condition), adw_breakpoint_set_condition)

  _WRAP_PROPERTY("condition", BreakpointCondition)

  _WRAP_SIGNAL(void apply(), "apply", no_default_handler)
  _WRAP_SIGNAL(void unapply(), "unapply", no_default_handler)
};

} // namespace Adw

namespace Glib
{
  /** A Glib::wrap() method for this object.
   *
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Adw::Breakpoint
   */
  Adw::Breakpoint* wrap(AdwBreakpoint* object, bool take_copy = false);
}
