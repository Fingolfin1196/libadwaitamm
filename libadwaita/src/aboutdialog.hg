/* Copyright (c) 2024 Kurt BÃ¶hm <kurbo96@gmail.com>
 *
 * This file is part of libadwaitamm.
 *
 * libadwaitamm is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 2.1 of the License,
 * or (at your option) any later version.
 *
 * libadwaitamm is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <libadwaitamm/dialog.h>

_DEFS(libadwaitamm,libadwaita)
_CONFIGINCLUDE(libadwaitammconfig.h)

// The documentation explicitly advises against this.
// But G_DECLARE_FINAL_TYPE seems to do struct { ... } Foo; which means we
// cannot forward-declare a struct type Foo.
#include <libadwaita-1/adwaita.h>

namespace Adw
{
class AboutDialog : public Adw::Dialog {
  _CLASS_GTKOBJECT(AboutDialog, AdwAboutDialog, ADW_ABOUT_DIALOG, Adw::Dialog, AdwDialog)
  _STRUCT_NOT_HIDDEN
  _UNMANAGEABLE
  _DO_NOT_DERIVE_GTYPE

public:
  _WRAP_CTOR(AboutDialog(), adw_about_dialog_new)
  _WRAP_CTOR(AboutDialog(const Glib::ustring& resource_path, const Glib::ustring& release_notes_version), adw_about_dialog_new_from_appdata)

#m4 _CONVERSION(`const char* const*',`std::vector<Glib::ustring>',`Glib::ArrayHandler<Glib::ustring>::array_to_vector($3, Glib::OWNERSHIP_NONE)')
#m4 _CONVERSION(`const std::vector<Glib::ustring>&',`const char**',`Glib::ArrayHandler<Glib::ustring>::vector_to_array($3).data ()')

  _WRAP_METHOD(Glib::ustring get_application_name(), adw_about_dialog_get_application_name)
  _WRAP_METHOD(void set_application_name(const Glib::ustring& application_name), adw_about_dialog_set_application_name)
  _WRAP_METHOD(Glib::ustring get_application_icon(), adw_about_dialog_get_application_icon)
  _WRAP_METHOD(void set_application_icon(const Glib::ustring& application_icon), adw_about_dialog_set_application_icon)
  _WRAP_METHOD(Glib::ustring get_developer_name(), adw_about_dialog_get_developer_name)
  _WRAP_METHOD(void set_developer_name(const Glib::ustring& developer_name), adw_about_dialog_set_developer_name)
  _WRAP_METHOD(Glib::ustring get_version(), adw_about_dialog_get_version)
  _WRAP_METHOD(void set_version(const Glib::ustring& version), adw_about_dialog_set_version)
  _WRAP_METHOD(Glib::ustring get_release_notes_version(), adw_about_dialog_get_release_notes_version)
  _WRAP_METHOD(void set_release_notes_version(const Glib::ustring& version), adw_about_dialog_set_release_notes_version)
  _WRAP_METHOD(Glib::ustring get_release_notes(), adw_about_dialog_get_release_notes)
  _WRAP_METHOD(void set_release_notes(const Glib::ustring& release_notes), adw_about_dialog_set_release_notes)
  _WRAP_METHOD(Glib::ustring get_comments(), adw_about_dialog_get_comments)
  _WRAP_METHOD(void set_comments(const Glib::ustring& comments), adw_about_dialog_set_comments)
  _WRAP_METHOD(Glib::ustring get_website(), adw_about_dialog_get_website)
  _WRAP_METHOD(void set_website(const Glib::ustring& website), adw_about_dialog_set_website)
  _WRAP_METHOD(Glib::ustring get_support_url(), adw_about_dialog_get_support_url)
  _WRAP_METHOD(void set_support_url(const Glib::ustring& support_url), adw_about_dialog_set_support_url)
  _WRAP_METHOD(Glib::ustring get_issue_url(), adw_about_dialog_get_issue_url)
  _WRAP_METHOD(void set_issue_url(const Glib::ustring& issue_url), adw_about_dialog_set_issue_url)
  _WRAP_METHOD(void add_link(const Glib::ustring& title, const Glib::ustring& url), adw_about_dialog_add_link)
  _WRAP_METHOD(Glib::ustring get_debug_info(), adw_about_dialog_get_debug_info)
  _WRAP_METHOD(void set_debug_info(const Glib::ustring& debug_info), adw_about_dialog_set_debug_info)
  _WRAP_METHOD(Glib::ustring get_debug_info_filename(), adw_about_dialog_get_debug_info_filename)
  _WRAP_METHOD(void set_debug_info_filename(const Glib::ustring& filename), adw_about_dialog_set_debug_info_filename)
  _WRAP_METHOD(std::vector<Glib::ustring> get_developers(), adw_about_dialog_get_developers)
  _WRAP_METHOD(void set_developers(const std::vector<Glib::ustring>& developers), adw_about_dialog_set_developers)
  _WRAP_METHOD(std::vector<Glib::ustring> get_designers(), adw_about_dialog_get_designers)
  _WRAP_METHOD(void set_designers(const std::vector<Glib::ustring>& designers), adw_about_dialog_set_designers)
  _WRAP_METHOD(std::vector<Glib::ustring> get_artists(), adw_about_dialog_get_artists)
  _WRAP_METHOD(void set_artists(const std::vector<Glib::ustring>& artists), adw_about_dialog_set_artists)
  _WRAP_METHOD(std::vector<Glib::ustring> get_documenters(), adw_about_dialog_get_documenters)
  _WRAP_METHOD(void set_documenters(const std::vector<Glib::ustring>& documenters), adw_about_dialog_set_documenters)
  _WRAP_METHOD(Glib::ustring get_translator_credits(), adw_about_dialog_get_translator_credits)
  _WRAP_METHOD(void set_translator_credits(const Glib::ustring& translator_credits), adw_about_dialog_set_translator_credits)
  _WRAP_METHOD(void add_credit_section(const Glib::ustring& name, const std::vector<Glib::ustring>& people), adw_about_dialog_add_credit_section)
  _WRAP_METHOD(void add_acknowledgement_section(const Glib::ustring& name, const std::vector<Glib::ustring>& people), adw_about_dialog_add_acknowledgement_section)
  _WRAP_METHOD(Glib::ustring get_copyright(), adw_about_dialog_get_copyright)
  _WRAP_METHOD(void set_copyright(const Glib::ustring& copyright), adw_about_dialog_set_copyright)
  _WRAP_METHOD(Gtk::License get_license_type(), adw_about_dialog_get_license_type)
  _WRAP_METHOD(void set_license_type(Gtk::License license_type), adw_about_dialog_set_license_type)
  _WRAP_METHOD(Glib::ustring get_license(), adw_about_dialog_get_license)
  _WRAP_METHOD(void set_license(const Glib::ustring& license), adw_about_dialog_set_license)
  _WRAP_METHOD(void add_legal_section(const Glib::ustring& title, const Glib::ustring& copyright, Gtk::License license_type, const Glib::ustring& license), adw_about_dialog_add_legal_section)

  _WRAP_PROPERTY("application-icon", Glib::ustring)
  _WRAP_PROPERTY("application-name", Glib::ustring)
  _WRAP_PROPERTY("artists", std::vector<Glib::ustring>)
  _WRAP_PROPERTY("comments", Glib::ustring)
  _WRAP_PROPERTY("copyright", Glib::ustring)
  _WRAP_PROPERTY("debug-info", Glib::ustring)
  _WRAP_PROPERTY("debug-info-filename", Glib::ustring)
  _WRAP_PROPERTY("designers", std::vector<Glib::ustring>)
  _WRAP_PROPERTY("developer-name", Glib::ustring)
  _WRAP_PROPERTY("developers", std::vector<Glib::ustring>)
  _WRAP_PROPERTY("documenters", std::vector<Glib::ustring>)
  _WRAP_PROPERTY("issue-url", Glib::ustring)
  _WRAP_PROPERTY("license", Glib::ustring)
  _WRAP_PROPERTY("license-type", Gtk::License)
  _WRAP_PROPERTY("release-notes", Glib::ustring)
  _WRAP_PROPERTY("release-notes-version", Glib::ustring)
  _WRAP_PROPERTY("support-url", Glib::ustring)
  _WRAP_PROPERTY("translator-credits", Glib::ustring)
  _WRAP_PROPERTY("version", Glib::ustring)
  _WRAP_PROPERTY("website", Glib::ustring)

  _WRAP_SIGNAL(void activate_link(const Glib::ustring& uri), "activate-link", no_default_handler)
};

} // namespace Adw
